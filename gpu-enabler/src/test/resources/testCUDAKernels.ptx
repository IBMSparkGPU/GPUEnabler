//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 __T20[44] = {118, 111, 105, 100, 32, 115, 117, 109, 40, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __T21[48] = {118, 111, 105, 100, 32, 115, 117, 109, 95, 108, 40, 105, 110, 116, 32, 42, 44, 32, 108, 111, 110, 103, 32, 42, 44, 32, 108, 111, 110, 103, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __T22[65] = {118, 111, 105, 100, 32, 105, 110, 116, 65, 114, 114, 97, 121, 83, 117, 109, 40, 105, 110, 116, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 __T23[75] = {118, 111, 105, 100, 32, 68, 97, 116, 97, 80, 111, 105, 110, 116, 82, 101, 100, 117, 99, 101, 40, 105, 110, 116, 32, 42, 44, 32, 99, 111, 110, 115, 116, 32, 100, 111, 117, 98, 108, 101, 32, 42, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 41, 0};
.global .align 1 .b8 $str[31] = {106, 117, 109, 112, 32, 61, 61, 32, 98, 108, 111, 99, 107, 68, 105, 109, 46, 120, 32, 42, 32, 103, 114, 105, 100, 68, 105, 109, 46, 120, 0};
.global .align 1 .b8 $str1[19] = {116, 101, 115, 116, 67, 85, 68, 65, 75, 101, 114, 110, 101, 108, 115, 46, 99, 117, 0};

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z6sdotvvPKdS0_i
.visible .func  (.param .b64 func_retval0) _Z6sdotvvPKdS0_i(
	.param .b64 _Z6sdotvvPKdS0_i_param_0,
	.param .b64 _Z6sdotvvPKdS0_i_param_1,
	.param .b32 _Z6sdotvvPKdS0_i_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<11>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd7, [_Z6sdotvvPKdS0_i_param_0];
	ld.param.u64 	%rd8, [_Z6sdotvvPKdS0_i_param_1];
	ld.param.u32 	%r3, [_Z6sdotvvPKdS0_i_param_2];
	mov.f64 	%fd9, 0d0000000000000000;
	mov.f64 	%fd10, %fd9;
	mov.u32 	%r5, 0;
	setp.lt.s32	%p1, %r3, 1;
	@%p1 bra 	BB6_2;

BB6_1:
	ld.f64 	%fd6, [%rd8];
	ld.f64 	%fd7, [%rd7];
	fma.rn.f64 	%fd10, %fd7, %fd6, %fd10;
	add.s64 	%rd8, %rd8, 8;
	add.s64 	%rd7, %rd7, 8;
	add.s32 	%r5, %r5, 1;
	setp.lt.s32	%p2, %r5, %r3;
	mov.f64 	%fd9, %fd10;
	@%p2 bra 	BB6_1;

BB6_2:
	st.param.f64	[func_retval0+0], %fd9;
	ret;
}

	// .globl	_Z6dmulvsPdPKddi
.visible .func _Z6dmulvsPdPKddi(
	.param .b64 _Z6dmulvsPdPKddi_param_0,
	.param .b64 _Z6dmulvsPdPKddi_param_1,
	.param .b64 _Z6dmulvsPdPKddi_param_2,
	.param .b32 _Z6dmulvsPdPKddi_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<6>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd8, [_Z6dmulvsPdPKddi_param_0];
	ld.param.u64 	%rd7, [_Z6dmulvsPdPKddi_param_1];
	ld.param.f64 	%fd1, [_Z6dmulvsPdPKddi_param_2];
	ld.param.u32 	%r3, [_Z6dmulvsPdPKddi_param_3];
	mov.u32 	%r5, 0;
	setp.lt.s32	%p1, %r3, 1;
	@%p1 bra 	BB7_2;

BB7_1:
	ld.f64 	%fd2, [%rd7];
	mul.f64 	%fd3, %fd2, %fd1;
	st.f64 	[%rd8], %fd3;
	add.s64 	%rd8, %rd8, 8;
	add.s64 	%rd7, %rd7, 8;
	add.s32 	%r5, %r5, 1;
	setp.lt.s32	%p2, %r5, %r3;
	@%p2 bra 	BB7_1;

BB7_2:
	ret;
}

	// .globl	_Z3mapPdPKddS1_i
.visible .func _Z3mapPdPKddS1_i(
	.param .b64 _Z3mapPdPKddS1_i_param_0,
	.param .b64 _Z3mapPdPKddS1_i_param_1,
	.param .b64 _Z3mapPdPKddS1_i_param_2,
	.param .b64 _Z3mapPdPKddS1_i_param_3,
	.param .b32 _Z3mapPdPKddS1_i_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<25>;
	.reg .f64 	%fd<61>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd16, [_Z3mapPdPKddS1_i_param_0];
	ld.param.u64 	%rd10, [_Z3mapPdPKddS1_i_param_1];
	ld.param.f64 	%fd10, [_Z3mapPdPKddS1_i_param_2];
	ld.param.u64 	%rd12, [_Z3mapPdPKddS1_i_param_3];
	ld.param.u32 	%r8, [_Z3mapPdPKddS1_i_param_4];
	mov.f64 	%fd58, 0d0000000000000000;
	mov.f64 	%fd59, %fd58;
	mov.u32 	%r23, 0;
	setp.lt.s32	%p1, %r8, 1;
	@%p1 bra 	BB8_3;

	mov.u64 	%rd15, %rd10;

BB8_2:
	mov.u64 	%rd2, %rd15;
	ld.f64 	%fd13, [%rd2];
	ld.f64 	%fd14, [%rd12];
	fma.rn.f64 	%fd59, %fd14, %fd13, %fd59;
	add.s64 	%rd3, %rd2, 8;
	add.s64 	%rd12, %rd12, 8;
	add.s32 	%r23, %r23, 1;
	setp.lt.s32	%p2, %r23, %r8;
	mov.f64 	%fd58, %fd59;
	mov.u64 	%rd15, %rd3;
	@%p2 bra 	BB8_2;

BB8_3:
	mul.f64 	%fd4, %fd58, %fd10;
	neg.f64 	%fd15, %fd4;
	mov.f64 	%fd16, 0d3FF71547652B82FE;
	mul.rn.f64 	%fd17, %fd15, %fd16;
	mov.f64 	%fd18, 0d4338000000000000;
	add.rn.f64 	%fd19, %fd17, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r3, %temp}, %fd19;
	}
	mov.f64 	%fd20, 0dC338000000000000;
	add.rn.f64 	%fd21, %fd19, %fd20;
	mov.f64 	%fd22, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd23, %fd21, %fd22, %fd15;
	mov.f64 	%fd24, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd25, %fd21, %fd24, %fd23;
	mov.f64 	%fd26, 0d3E928AF3FCA213EA;
	mov.f64 	%fd27, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F81111111122322;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	mov.f64 	%fd39, 0d3FA55555555502A1;
	fma.rn.f64 	%fd40, %fd38, %fd25, %fd39;
	mov.f64 	%fd41, 0d3FC5555555555511;
	fma.rn.f64 	%fd42, %fd40, %fd25, %fd41;
	mov.f64 	%fd43, 0d3FE000000000000B;
	fma.rn.f64 	%fd44, %fd42, %fd25, %fd43;
	mov.f64 	%fd45, 0d3FF0000000000000;
	fma.rn.f64 	%fd46, %fd44, %fd25, %fd45;
	fma.rn.f64 	%fd47, %fd46, %fd25, %fd45;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r4, %temp}, %fd47;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r5}, %fd47;
	}
	shl.b32 	%r10, %r3, 20;
	add.s32 	%r11, %r5, %r10;
	mov.b64 	%fd60, {%r4, %r11};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r12}, %fd15;
	}
	mov.b32 	 %f2, %r12;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p3, %f1, 0f4086232B;
	@%p3 bra 	BB8_6;

	setp.gt.f64	%p4, %fd4, 0d8000000000000000;
	mov.f64 	%fd48, 0d7FF0000000000000;
	sub.f64 	%fd49, %fd48, %fd4;
	selp.f64	%fd60, 0d0000000000000000, %fd49, %p4;
	setp.geu.f32	%p5, %f1, 0f40874800;
	@%p5 bra 	BB8_6;

	shr.u32 	%r13, %r3, 31;
	add.s32 	%r14, %r3, %r13;
	shr.s32 	%r15, %r14, 1;
	shl.b32 	%r16, %r15, 20;
	add.s32 	%r17, %r16, %r5;
	mov.b64 	%fd50, {%r4, %r17};
	sub.s32 	%r18, %r3, %r15;
	shl.b32 	%r19, %r18, 20;
	add.s32 	%r20, %r19, 1072693248;
	mov.u32 	%r21, 0;
	mov.b64 	%fd51, {%r21, %r20};
	mul.f64 	%fd60, %fd50, %fd51;

BB8_6:
	add.f64 	%fd52, %fd60, 0d3FF0000000000000;
	rcp.rn.f64 	%fd53, %fd52;
	add.f64 	%fd54, %fd53, 0dBFF0000000000000;
	mul.f64 	%fd9, %fd54, %fd10;
	mov.u32 	%r24, 0;
	@%p1 bra 	BB8_9;

	mov.u64 	%rd14, %rd10;

BB8_8:
	ld.f64 	%fd55, [%rd14];
	mul.f64 	%fd56, %fd9, %fd55;
	st.f64 	[%rd16], %fd56;
	add.s64 	%rd16, %rd16, 8;
	add.s64 	%rd14, %rd14, 8;
	add.s32 	%r24, %r24, 1;
	setp.lt.s32	%p7, %r24, %r8;
	@%p7 bra 	BB8_8;

BB8_9:
	ret;
}

	// .globl	_Z15atomicAddDoublePdd
.visible .func  (.param .b64 func_retval0) _Z15atomicAddDoublePdd(
	.param .b64 _Z15atomicAddDoublePdd_param_0,
	.param .b64 _Z15atomicAddDoublePdd_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd4, [_Z15atomicAddDoublePdd_param_0];
	ld.param.f64 	%fd2, [_Z15atomicAddDoublePdd_param_1];
	ld.u64 	%rd6, [%rd4];

BB9_1:
	mov.u64 	%rd2, %rd6;
	mov.b64 	 %fd1, %rd2;
	add.f64 	%fd3, %fd1, %fd2;
	mov.b64 	 %rd5, %fd3;
	atom.cas.b64 	%rd6, [%rd4], %rd2, %rd5;
	setp.ne.s64	%p1, %rd2, %rd6;
	@%p1 bra 	BB9_1;

	st.param.f64	[func_retval0+0], %fd1;
	ret;
}

	// .globl	_Z13__shfl_doubledi
.visible .func  (.param .b64 func_retval0) _Z13__shfl_doubledi(
	.param .b64 _Z13__shfl_doubledi_param_0,
	.param .b32 _Z13__shfl_doubledi_param_1
)
{
	.reg .b32 	%r<13>;
	.reg .f64 	%fd<3>;


	ld.param.f64 	%fd1, [_Z13__shfl_doubledi_param_0];
	ld.param.u32 	%r5, [_Z13__shfl_doubledi_param_1];
	// inline asm
	mov.b64 {%r1,%r2}, %fd1;
	// inline asm
	mov.u32 	%r10, 31;
	// inline asm
	shfl.idx.b32 %r3, %r1, %r5, %r10;
	// inline asm
	// inline asm
	shfl.idx.b32 %r7, %r2, %r5, %r10;
	// inline asm
	// inline asm
	mov.b64 %fd2, {%r3,%r7};
	// inline asm
	st.param.f64	[func_retval0+0], %fd2;
	ret;
}

	// .globl	_Z13warpReduceSumd
.visible .func  (.param .b64 func_retval0) _Z13warpReduceSumd(
	.param .b64 _Z13warpReduceSumd_param_0
)
{
	.reg .b32 	%r<90>;
	.reg .f64 	%fd<12>;


	ld.param.f64 	%fd1, [_Z13warpReduceSumd_param_0];
	mov.u32 	%r61, %ctaid.x;
	mov.u32 	%r62, %ntid.x;
	mov.u32 	%r63, %tid.x;
	mad.lo.s32 	%r64, %r62, %r61, %r63;
	add.s32 	%r65, %r64, 16;
	shr.s32 	%r66, %r65, 31;
	shr.u32 	%r67, %r66, 27;
	add.s32 	%r68, %r65, %r67;
	and.b32  	%r69, %r68, -32;
	sub.s32 	%r5, %r65, %r69;
	// inline asm
	mov.b64 {%r1,%r2}, %fd1;
	// inline asm
	mov.u32 	%r58, 31;
	// inline asm
	shfl.idx.b32 %r3, %r1, %r5, %r58;
	// inline asm
	// inline asm
	shfl.idx.b32 %r7, %r2, %r5, %r58;
	// inline asm
	// inline asm
	mov.b64 %fd2, {%r3,%r7};
	// inline asm
	add.f64 	%fd3, %fd2, %fd1;
	add.s32 	%r70, %r64, 8;
	shr.s32 	%r71, %r70, 31;
	shr.u32 	%r72, %r71, 27;
	add.s32 	%r73, %r70, %r72;
	and.b32  	%r74, %r73, -32;
	sub.s32 	%r17, %r70, %r74;
	// inline asm
	mov.b64 {%r13,%r14}, %fd3;
	// inline asm
	// inline asm
	shfl.idx.b32 %r15, %r13, %r17, %r58;
	// inline asm
	// inline asm
	shfl.idx.b32 %r19, %r14, %r17, %r58;
	// inline asm
	// inline asm
	mov.b64 %fd4, {%r15,%r19};
	// inline asm
	add.f64 	%fd5, %fd3, %fd4;
	add.s32 	%r75, %r64, 4;
	shr.s32 	%r76, %r75, 31;
	shr.u32 	%r77, %r76, 27;
	add.s32 	%r78, %r75, %r77;
	and.b32  	%r79, %r78, -32;
	sub.s32 	%r29, %r75, %r79;
	// inline asm
	mov.b64 {%r25,%r26}, %fd5;
	// inline asm
	// inline asm
	shfl.idx.b32 %r27, %r25, %r29, %r58;
	// inline asm
	// inline asm
	shfl.idx.b32 %r31, %r26, %r29, %r58;
	// inline asm
	// inline asm
	mov.b64 %fd6, {%r27,%r31};
	// inline asm
	add.f64 	%fd7, %fd5, %fd6;
	add.s32 	%r80, %r64, 2;
	shr.s32 	%r81, %r80, 31;
	shr.u32 	%r82, %r81, 27;
	add.s32 	%r83, %r80, %r82;
	and.b32  	%r84, %r83, -32;
	sub.s32 	%r41, %r80, %r84;
	// inline asm
	mov.b64 {%r37,%r38}, %fd7;
	// inline asm
	// inline asm
	shfl.idx.b32 %r39, %r37, %r41, %r58;
	// inline asm
	// inline asm
	shfl.idx.b32 %r43, %r38, %r41, %r58;
	// inline asm
	// inline asm
	mov.b64 %fd8, {%r39,%r43};
	// inline asm
	add.f64 	%fd9, %fd7, %fd8;
	add.s32 	%r85, %r64, 1;
	shr.s32 	%r86, %r85, 31;
	shr.u32 	%r87, %r86, 27;
	add.s32 	%r88, %r85, %r87;
	and.b32  	%r89, %r88, -32;
	sub.s32 	%r53, %r85, %r89;
	// inline asm
	mov.b64 {%r49,%r50}, %fd9;
	// inline asm
	// inline asm
	shfl.idx.b32 %r51, %r49, %r53, %r58;
	// inline asm
	// inline asm
	shfl.idx.b32 %r55, %r50, %r53, %r58;
	// inline asm
	// inline asm
	mov.b64 %fd10, {%r51,%r55};
	// inline asm
	add.f64 	%fd11, %fd9, %fd10;
	st.param.f64	[func_retval0+0], %fd11;
	ret;
}

	// .globl	_Z14__shfl_double47double4i
.visible .func  (.param .align 16 .b8 func_retval0[32]) _Z14__shfl_double47double4i(
	.param .align 16 .b8 _Z14__shfl_double47double4i_param_0[32],
	.param .b32 _Z14__shfl_double47double4i_param_1
)
{
	.reg .b32 	%r<49>;
	.reg .f64 	%fd<9>;


	ld.param.f64 	%fd4, [_Z14__shfl_double47double4i_param_0+24];
	ld.param.f64 	%fd3, [_Z14__shfl_double47double4i_param_0+16];
	ld.param.f64 	%fd2, [_Z14__shfl_double47double4i_param_0+8];
	ld.param.f64 	%fd1, [_Z14__shfl_double47double4i_param_0];
	ld.param.u32 	%r11, [_Z14__shfl_double47double4i_param_1];
	// inline asm
	mov.b64 {%r1,%r2}, %fd1;
	// inline asm
	// inline asm
	mov.b64 {%r3,%r4}, %fd2;
	// inline asm
	// inline asm
	mov.b64 {%r5,%r6}, %fd3;
	// inline asm
	// inline asm
	mov.b64 {%r7,%r8}, %fd4;
	// inline asm
	mov.u32 	%r40, 31;
	// inline asm
	shfl.idx.b32 %r9, %r1, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r13, %r2, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r17, %r3, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r21, %r4, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r25, %r5, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r29, %r6, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r33, %r7, %r11, %r40;
	// inline asm
	// inline asm
	shfl.idx.b32 %r37, %r8, %r11, %r40;
	// inline asm
	// inline asm
	mov.b64 %fd5, {%r9,%r13};
	// inline asm
	// inline asm
	mov.b64 %fd6, {%r17,%r21};
	// inline asm
	// inline asm
	mov.b64 %fd7, {%r25,%r29};
	// inline asm
	// inline asm
	mov.b64 %fd8, {%r33,%r37};
	// inline asm
	st.param.f64	[func_retval0+0], %fd5;
	st.param.f64	[func_retval0+8], %fd6;
	st.param.f64	[func_retval0+16], %fd7;
	st.param.f64	[func_retval0+24], %fd8;
	ret;
}

	// .globl	_Z14warpReduceVSum7double4
.visible .func  (.param .align 16 .b8 func_retval0[32]) _Z14warpReduceVSum7double4(
	.param .align 16 .b8 _Z14warpReduceVSum7double4_param_0[32]
)
{
	.reg .b32 	%r<270>;
	.reg .f64 	%fd<45>;


	ld.param.f64 	%fd4, [_Z14warpReduceVSum7double4_param_0+24];
	ld.param.f64 	%fd3, [_Z14warpReduceVSum7double4_param_0+16];
	ld.param.f64 	%fd2, [_Z14warpReduceVSum7double4_param_0+8];
	ld.param.f64 	%fd1, [_Z14warpReduceVSum7double4_param_0];
	mov.u32 	%r241, %ctaid.x;
	mov.u32 	%r242, %ntid.x;
	mov.u32 	%r243, %tid.x;
	mad.lo.s32 	%r244, %r242, %r241, %r243;
	add.s32 	%r245, %r244, 16;
	shr.s32 	%r246, %r245, 31;
	shr.u32 	%r247, %r246, 27;
	add.s32 	%r248, %r245, %r247;
	and.b32  	%r249, %r248, -32;
	sub.s32 	%r11, %r245, %r249;
	// inline asm
	mov.b64 {%r1,%r2}, %fd1;
	// inline asm
	// inline asm
	mov.b64 {%r3,%r4}, %fd2;
	// inline asm
	// inline asm
	mov.b64 {%r5,%r6}, %fd3;
	// inline asm
	// inline asm
	mov.b64 {%r7,%r8}, %fd4;
	// inline asm
	mov.u32 	%r232, 31;
	// inline asm
	shfl.idx.b32 %r9, %r1, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r13, %r2, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r17, %r3, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r21, %r4, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r25, %r5, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r29, %r6, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r33, %r7, %r11, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r37, %r8, %r11, %r232;
	// inline asm
	// inline asm
	mov.b64 %fd5, {%r9,%r13};
	// inline asm
	// inline asm
	mov.b64 %fd6, {%r17,%r21};
	// inline asm
	// inline asm
	mov.b64 %fd7, {%r25,%r29};
	// inline asm
	// inline asm
	mov.b64 %fd8, {%r33,%r37};
	// inline asm
	add.f64 	%fd9, %fd1, %fd5;
	add.f64 	%fd10, %fd2, %fd6;
	add.f64 	%fd11, %fd3, %fd7;
	add.f64 	%fd12, %fd4, %fd8;
	add.s32 	%r250, %r244, 8;
	shr.s32 	%r251, %r250, 31;
	shr.u32 	%r252, %r251, 27;
	add.s32 	%r253, %r250, %r252;
	and.b32  	%r254, %r253, -32;
	sub.s32 	%r59, %r250, %r254;
	// inline asm
	mov.b64 {%r49,%r50}, %fd9;
	// inline asm
	// inline asm
	mov.b64 {%r51,%r52}, %fd10;
	// inline asm
	// inline asm
	mov.b64 {%r53,%r54}, %fd11;
	// inline asm
	// inline asm
	mov.b64 {%r55,%r56}, %fd12;
	// inline asm
	// inline asm
	shfl.idx.b32 %r57, %r49, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r61, %r50, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r65, %r51, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r69, %r52, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r73, %r53, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r77, %r54, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r81, %r55, %r59, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r85, %r56, %r59, %r232;
	// inline asm
	// inline asm
	mov.b64 %fd13, {%r57,%r61};
	// inline asm
	// inline asm
	mov.b64 %fd14, {%r65,%r69};
	// inline asm
	// inline asm
	mov.b64 %fd15, {%r73,%r77};
	// inline asm
	// inline asm
	mov.b64 %fd16, {%r81,%r85};
	// inline asm
	add.f64 	%fd17, %fd9, %fd13;
	add.f64 	%fd18, %fd10, %fd14;
	add.f64 	%fd19, %fd11, %fd15;
	add.f64 	%fd20, %fd12, %fd16;
	add.s32 	%r255, %r244, 4;
	shr.s32 	%r256, %r255, 31;
	shr.u32 	%r257, %r256, 27;
	add.s32 	%r258, %r255, %r257;
	and.b32  	%r259, %r258, -32;
	sub.s32 	%r107, %r255, %r259;
	// inline asm
	mov.b64 {%r97,%r98}, %fd17;
	// inline asm
	// inline asm
	mov.b64 {%r99,%r100}, %fd18;
	// inline asm
	// inline asm
	mov.b64 {%r101,%r102}, %fd19;
	// inline asm
	// inline asm
	mov.b64 {%r103,%r104}, %fd20;
	// inline asm
	// inline asm
	shfl.idx.b32 %r105, %r97, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r109, %r98, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r113, %r99, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r117, %r100, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r121, %r101, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r125, %r102, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r129, %r103, %r107, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r133, %r104, %r107, %r232;
	// inline asm
	// inline asm
	mov.b64 %fd21, {%r105,%r109};
	// inline asm
	// inline asm
	mov.b64 %fd22, {%r113,%r117};
	// inline asm
	// inline asm
	mov.b64 %fd23, {%r121,%r125};
	// inline asm
	// inline asm
	mov.b64 %fd24, {%r129,%r133};
	// inline asm
	add.f64 	%fd25, %fd17, %fd21;
	add.f64 	%fd26, %fd18, %fd22;
	add.f64 	%fd27, %fd19, %fd23;
	add.f64 	%fd28, %fd20, %fd24;
	add.s32 	%r260, %r244, 2;
	shr.s32 	%r261, %r260, 31;
	shr.u32 	%r262, %r261, 27;
	add.s32 	%r263, %r260, %r262;
	and.b32  	%r264, %r263, -32;
	sub.s32 	%r155, %r260, %r264;
	// inline asm
	mov.b64 {%r145,%r146}, %fd25;
	// inline asm
	// inline asm
	mov.b64 {%r147,%r148}, %fd26;
	// inline asm
	// inline asm
	mov.b64 {%r149,%r150}, %fd27;
	// inline asm
	// inline asm
	mov.b64 {%r151,%r152}, %fd28;
	// inline asm
	// inline asm
	shfl.idx.b32 %r153, %r145, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r157, %r146, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r161, %r147, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r165, %r148, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r169, %r149, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r173, %r150, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r177, %r151, %r155, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r181, %r152, %r155, %r232;
	// inline asm
	// inline asm
	mov.b64 %fd29, {%r153,%r157};
	// inline asm
	// inline asm
	mov.b64 %fd30, {%r161,%r165};
	// inline asm
	// inline asm
	mov.b64 %fd31, {%r169,%r173};
	// inline asm
	// inline asm
	mov.b64 %fd32, {%r177,%r181};
	// inline asm
	add.f64 	%fd33, %fd25, %fd29;
	add.f64 	%fd34, %fd26, %fd30;
	add.f64 	%fd35, %fd27, %fd31;
	add.f64 	%fd36, %fd28, %fd32;
	add.s32 	%r265, %r244, 1;
	shr.s32 	%r266, %r265, 31;
	shr.u32 	%r267, %r266, 27;
	add.s32 	%r268, %r265, %r267;
	and.b32  	%r269, %r268, -32;
	sub.s32 	%r203, %r265, %r269;
	// inline asm
	mov.b64 {%r193,%r194}, %fd33;
	// inline asm
	// inline asm
	mov.b64 {%r195,%r196}, %fd34;
	// inline asm
	// inline asm
	mov.b64 {%r197,%r198}, %fd35;
	// inline asm
	// inline asm
	mov.b64 {%r199,%r200}, %fd36;
	// inline asm
	// inline asm
	shfl.idx.b32 %r201, %r193, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r205, %r194, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r209, %r195, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r213, %r196, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r217, %r197, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r221, %r198, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r225, %r199, %r203, %r232;
	// inline asm
	// inline asm
	shfl.idx.b32 %r229, %r200, %r203, %r232;
	// inline asm
	// inline asm
	mov.b64 %fd37, {%r201,%r205};
	// inline asm
	// inline asm
	mov.b64 %fd38, {%r209,%r213};
	// inline asm
	// inline asm
	mov.b64 %fd39, {%r217,%r221};
	// inline asm
	// inline asm
	mov.b64 %fd40, {%r225,%r229};
	// inline asm
	add.f64 	%fd41, %fd33, %fd37;
	add.f64 	%fd42, %fd34, %fd38;
	add.f64 	%fd43, %fd35, %fd39;
	add.f64 	%fd44, %fd36, %fd40;
	st.param.f64	[func_retval0+0], %fd41;
	st.param.f64	[func_retval0+8], %fd42;
	st.param.f64	[func_retval0+16], %fd43;
	st.param.f64	[func_retval0+24], %fd44;
	ret;
}

	// .globl	_Z18deviceReduceKernelPdS_lll
.visible .func  (.param .b64 func_retval0) _Z18deviceReduceKernelPdS_lll(
	.param .b64 _Z18deviceReduceKernelPdS_lll_param_0,
	.param .b64 _Z18deviceReduceKernelPdS_lll_param_1,
	.param .b64 _Z18deviceReduceKernelPdS_lll_param_2,
	.param .b64 _Z18deviceReduceKernelPdS_lll_param_3,
	.param .b64 _Z18deviceReduceKernelPdS_lll_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .b32 	%r<93>;
	.reg .f64 	%fd<21>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd8, [_Z18deviceReduceKernelPdS_lll_param_0];
	ld.param.u64 	%rd9, [_Z18deviceReduceKernelPdS_lll_param_1];
	ld.param.u64 	%rd10, [_Z18deviceReduceKernelPdS_lll_param_2];
	ld.param.u64 	%rd11, [_Z18deviceReduceKernelPdS_lll_param_3];
	ld.param.u64 	%rd12, [_Z18deviceReduceKernelPdS_lll_param_4];
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r1, %r4, %r2;
	cvt.u64.u32	%rd18, %r3;
	mov.f64 	%fd20, 0d0000000000000000;
	setp.ge.s64	%p1, %rd18, %rd11;
	@%p1 bra 	BB14_3;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r5, %r1;
	cvt.u64.u32	%rd2, %r6;
	mov.f64 	%fd20, 0d0000000000000000;

BB14_2:
	mul.lo.s64 	%rd13, %rd18, %rd12;
	add.s64 	%rd14, %rd13, %rd10;
	shl.b64 	%rd15, %rd14, 3;
	add.s64 	%rd16, %rd8, %rd15;
	ld.f64 	%fd7, [%rd16];
	add.f64 	%fd20, %fd20, %fd7;
	add.s64 	%rd18, %rd2, %rd18;
	setp.lt.s64	%p2, %rd18, %rd11;
	@%p2 bra 	BB14_2;

BB14_3:
	add.s32 	%r67, %r3, 16;
	shr.s32 	%r68, %r67, 31;
	shr.u32 	%r69, %r68, 27;
	add.s32 	%r70, %r67, %r69;
	and.b32  	%r71, %r70, -32;
	sub.s32 	%r11, %r67, %r71;
	// inline asm
	mov.b64 {%r7,%r8}, %fd20;
	// inline asm
	mov.u32 	%r64, 31;
	// inline asm
	shfl.idx.b32 %r9, %r7, %r11, %r64;
	// inline asm
	// inline asm
	shfl.idx.b32 %r13, %r8, %r11, %r64;
	// inline asm
	// inline asm
	mov.b64 %fd9, {%r9,%r13};
	// inline asm
	add.f64 	%fd10, %fd20, %fd9;
	add.s32 	%r72, %r3, 8;
	shr.s32 	%r73, %r72, 31;
	shr.u32 	%r74, %r73, 27;
	add.s32 	%r75, %r72, %r74;
	and.b32  	%r76, %r75, -32;
	sub.s32 	%r23, %r72, %r76;
	// inline asm
	mov.b64 {%r19,%r20}, %fd10;
	// inline asm
	// inline asm
	shfl.idx.b32 %r21, %r19, %r23, %r64;
	// inline asm
	// inline asm
	shfl.idx.b32 %r25, %r20, %r23, %r64;
	// inline asm
	// inline asm
	mov.b64 %fd11, {%r21,%r25};
	// inline asm
	add.f64 	%fd12, %fd10, %fd11;
	add.s32 	%r77, %r3, 4;
	shr.s32 	%r78, %r77, 31;
	shr.u32 	%r79, %r78, 27;
	add.s32 	%r80, %r77, %r79;
	and.b32  	%r81, %r80, -32;
	sub.s32 	%r35, %r77, %r81;
	// inline asm
	mov.b64 {%r31,%r32}, %fd12;
	// inline asm
	// inline asm
	shfl.idx.b32 %r33, %r31, %r35, %r64;
	// inline asm
	// inline asm
	shfl.idx.b32 %r37, %r32, %r35, %r64;
	// inline asm
	// inline asm
	mov.b64 %fd13, {%r33,%r37};
	// inline asm
	add.f64 	%fd14, %fd12, %fd13;
	add.s32 	%r82, %r3, 2;
	shr.s32 	%r83, %r82, 31;
	shr.u32 	%r84, %r83, 27;
	add.s32 	%r85, %r82, %r84;
	and.b32  	%r86, %r85, -32;
	sub.s32 	%r47, %r82, %r86;
	// inline asm
	mov.b64 {%r43,%r44}, %fd14;
	// inline asm
	// inline asm
	shfl.idx.b32 %r45, %r43, %r47, %r64;
	// inline asm
	// inline asm
	shfl.idx.b32 %r49, %r44, %r47, %r64;
	// inline asm
	// inline asm
	mov.b64 %fd15, {%r45,%r49};
	// inline asm
	add.f64 	%fd16, %fd14, %fd15;
	add.s32 	%r87, %r3, 1;
	shr.s32 	%r88, %r87, 31;
	shr.u32 	%r89, %r88, 27;
	add.s32 	%r90, %r87, %r89;
	and.b32  	%r91, %r90, -32;
	sub.s32 	%r59, %r87, %r91;
	// inline asm
	mov.b64 {%r55,%r56}, %fd16;
	// inline asm
	// inline asm
	shfl.idx.b32 %r57, %r55, %r59, %r64;
	// inline asm
	// inline asm
	shfl.idx.b32 %r61, %r56, %r59, %r64;
	// inline asm
	// inline asm
	mov.b64 %fd17, {%r57,%r61};
	// inline asm
	add.f64 	%fd4, %fd16, %fd17;
	and.b32  	%r92, %r2, 31;
	setp.ne.s32	%p3, %r92, 0;
	@%p3 bra 	BB14_6;

	ld.u64 	%rd19, [%rd9];

BB14_5:
	mov.u64 	%rd6, %rd19;
	mov.b64 	 %fd18, %rd6;
	add.f64 	%fd19, %fd4, %fd18;
	mov.b64 	 %rd17, %fd19;
	atom.cas.b64 	%rd19, [%rd9], %rd6, %rd17;
	setp.ne.s64	%p4, %rd6, %rd19;
	@%p4 bra 	BB14_5;

BB14_6:
	st.param.b64	[func_retval0+0], %rd9;
	ret;
}

	// .globl	_Z23deviceReduceArrayKernelPdS_ll
.visible .func _Z23deviceReduceArrayKernelPdS_ll(
	.param .b64 _Z23deviceReduceArrayKernelPdS_ll_param_0,
	.param .b64 _Z23deviceReduceArrayKernelPdS_ll_param_1,
	.param .b64 _Z23deviceReduceArrayKernelPdS_ll_param_2,
	.param .b64 _Z23deviceReduceArrayKernelPdS_ll_param_3
)
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<375>;
	.reg .f64 	%fd<105>;
	.reg .b64 	%rd<65>;


	ld.param.u64 	%rd35, [_Z23deviceReduceArrayKernelPdS_ll_param_0];
	ld.param.u64 	%rd36, [_Z23deviceReduceArrayKernelPdS_ll_param_1];
	ld.param.u64 	%rd37, [_Z23deviceReduceArrayKernelPdS_ll_param_2];
	ld.param.u64 	%rd38, [_Z23deviceReduceArrayKernelPdS_ll_param_3];
	mov.u64 	%rd62, 0;
	setp.lt.s64	%p1, %rd37, 4;
	@%p1 bra 	BB15_15;

	mov.u32 	%r13, %ctaid.x;
	mov.u32 	%r14, %ntid.x;
	mov.u32 	%r15, %tid.x;
	mad.lo.s32 	%r16, %r14, %r13, %r15;
	cvt.u64.u32	%rd1, %r16;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r18, %r17, %r14;
	cvt.u64.u32	%rd2, %r18;
	and.b32  	%r1, %r15, 31;
	add.s32 	%r19, %r16, 16;
	shr.s32 	%r20, %r19, 31;
	shr.u32 	%r21, %r20, 27;
	add.s32 	%r22, %r19, %r21;
	and.b32  	%r23, %r22, -32;
	sub.s32 	%r2, %r19, %r23;
	add.s32 	%r24, %r16, 8;
	shr.s32 	%r25, %r24, 31;
	shr.u32 	%r26, %r25, 27;
	add.s32 	%r27, %r24, %r26;
	and.b32  	%r28, %r27, -32;
	sub.s32 	%r3, %r24, %r28;
	add.s32 	%r29, %r16, 4;
	shr.s32 	%r30, %r29, 31;
	shr.u32 	%r31, %r30, 27;
	add.s32 	%r32, %r29, %r31;
	and.b32  	%r33, %r32, -32;
	sub.s32 	%r4, %r29, %r33;
	add.s32 	%r34, %r16, 2;
	shr.s32 	%r35, %r34, 31;
	shr.u32 	%r36, %r35, 27;
	add.s32 	%r37, %r34, %r36;
	and.b32  	%r38, %r37, -32;
	sub.s32 	%r5, %r34, %r38;
	add.s32 	%r39, %r16, 1;
	shr.s32 	%r40, %r39, 31;
	shr.u32 	%r41, %r40, 27;
	add.s32 	%r42, %r39, %r41;
	and.b32  	%r43, %r42, -32;
	sub.s32 	%r6, %r39, %r43;
	mov.u64 	%rd62, 0;

BB15_2:
	mov.f64 	%fd101, 0d0000000000000000;
	mov.f64 	%fd100, %fd101;
	mov.f64 	%fd99, %fd101;
	mov.f64 	%fd98, %fd101;
	setp.ge.s64	%p2, %rd1, %rd38;
	@%p2 bra 	BB15_5;

	mov.f64 	%fd98, 0d0000000000000000;
	mov.f64 	%fd99, %fd98;
	mov.f64 	%fd100, %fd98;
	mov.f64 	%fd101, %fd98;
	mov.u64 	%rd57, %rd1;

BB15_4:
	mov.u64 	%rd4, %rd57;
	mul.lo.s64 	%rd41, %rd4, %rd37;
	add.s64 	%rd42, %rd41, %rd62;
	shl.b64 	%rd43, %rd42, 3;
	add.s64 	%rd44, %rd35, %rd43;
	ld.f64 	%fd31, [%rd44];
	add.f64 	%fd101, %fd101, %fd31;
	ld.f64 	%fd32, [%rd44+8];
	add.f64 	%fd100, %fd100, %fd32;
	ld.f64 	%fd33, [%rd44+16];
	add.f64 	%fd99, %fd99, %fd33;
	ld.f64 	%fd34, [%rd44+24];
	add.f64 	%fd98, %fd98, %fd34;
	add.s64 	%rd5, %rd2, %rd4;
	setp.lt.s64	%p3, %rd5, %rd38;
	mov.u64 	%rd57, %rd5;
	@%p3 bra 	BB15_4;

BB15_5:
	// inline asm
	mov.b64 {%r44,%r45}, %fd101;
	// inline asm
	// inline asm
	mov.b64 {%r46,%r47}, %fd100;
	// inline asm
	// inline asm
	mov.b64 {%r48,%r49}, %fd99;
	// inline asm
	// inline asm
	mov.b64 {%r50,%r51}, %fd98;
	// inline asm
	mov.u32 	%r275, 31;
	// inline asm
	shfl.idx.b32 %r52, %r44, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r56, %r45, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r60, %r46, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r64, %r47, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r68, %r48, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r72, %r49, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r76, %r50, %r2, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r80, %r51, %r2, %r275;
	// inline asm
	// inline asm
	mov.b64 %fd39, {%r52,%r56};
	// inline asm
	// inline asm
	mov.b64 %fd40, {%r60,%r64};
	// inline asm
	// inline asm
	mov.b64 %fd41, {%r68,%r72};
	// inline asm
	// inline asm
	mov.b64 %fd42, {%r76,%r80};
	// inline asm
	add.f64 	%fd43, %fd101, %fd39;
	add.f64 	%fd44, %fd100, %fd40;
	add.f64 	%fd45, %fd99, %fd41;
	add.f64 	%fd46, %fd98, %fd42;
	// inline asm
	mov.b64 {%r92,%r93}, %fd43;
	// inline asm
	// inline asm
	mov.b64 {%r94,%r95}, %fd44;
	// inline asm
	// inline asm
	mov.b64 {%r96,%r97}, %fd45;
	// inline asm
	// inline asm
	mov.b64 {%r98,%r99}, %fd46;
	// inline asm
	// inline asm
	shfl.idx.b32 %r100, %r92, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r104, %r93, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r108, %r94, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r112, %r95, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r116, %r96, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r120, %r97, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r124, %r98, %r3, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r128, %r99, %r3, %r275;
	// inline asm
	// inline asm
	mov.b64 %fd47, {%r100,%r104};
	// inline asm
	// inline asm
	mov.b64 %fd48, {%r108,%r112};
	// inline asm
	// inline asm
	mov.b64 %fd49, {%r116,%r120};
	// inline asm
	// inline asm
	mov.b64 %fd50, {%r124,%r128};
	// inline asm
	add.f64 	%fd51, %fd43, %fd47;
	add.f64 	%fd52, %fd44, %fd48;
	add.f64 	%fd53, %fd45, %fd49;
	add.f64 	%fd54, %fd46, %fd50;
	// inline asm
	mov.b64 {%r140,%r141}, %fd51;
	// inline asm
	// inline asm
	mov.b64 {%r142,%r143}, %fd52;
	// inline asm
	// inline asm
	mov.b64 {%r144,%r145}, %fd53;
	// inline asm
	// inline asm
	mov.b64 {%r146,%r147}, %fd54;
	// inline asm
	// inline asm
	shfl.idx.b32 %r148, %r140, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r152, %r141, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r156, %r142, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r160, %r143, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r164, %r144, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r168, %r145, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r172, %r146, %r4, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r176, %r147, %r4, %r275;
	// inline asm
	// inline asm
	mov.b64 %fd55, {%r148,%r152};
	// inline asm
	// inline asm
	mov.b64 %fd56, {%r156,%r160};
	// inline asm
	// inline asm
	mov.b64 %fd57, {%r164,%r168};
	// inline asm
	// inline asm
	mov.b64 %fd58, {%r172,%r176};
	// inline asm
	add.f64 	%fd59, %fd51, %fd55;
	add.f64 	%fd60, %fd52, %fd56;
	add.f64 	%fd61, %fd53, %fd57;
	add.f64 	%fd62, %fd54, %fd58;
	// inline asm
	mov.b64 {%r188,%r189}, %fd59;
	// inline asm
	// inline asm
	mov.b64 {%r190,%r191}, %fd60;
	// inline asm
	// inline asm
	mov.b64 {%r192,%r193}, %fd61;
	// inline asm
	// inline asm
	mov.b64 {%r194,%r195}, %fd62;
	// inline asm
	// inline asm
	shfl.idx.b32 %r196, %r188, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r200, %r189, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r204, %r190, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r208, %r191, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r212, %r192, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r216, %r193, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r220, %r194, %r5, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r224, %r195, %r5, %r275;
	// inline asm
	// inline asm
	mov.b64 %fd63, {%r196,%r200};
	// inline asm
	// inline asm
	mov.b64 %fd64, {%r204,%r208};
	// inline asm
	// inline asm
	mov.b64 %fd65, {%r212,%r216};
	// inline asm
	// inline asm
	mov.b64 %fd66, {%r220,%r224};
	// inline asm
	add.f64 	%fd67, %fd59, %fd63;
	add.f64 	%fd68, %fd60, %fd64;
	add.f64 	%fd69, %fd61, %fd65;
	add.f64 	%fd70, %fd62, %fd66;
	// inline asm
	mov.b64 {%r236,%r237}, %fd67;
	// inline asm
	// inline asm
	mov.b64 {%r238,%r239}, %fd68;
	// inline asm
	// inline asm
	mov.b64 {%r240,%r241}, %fd69;
	// inline asm
	// inline asm
	mov.b64 {%r242,%r243}, %fd70;
	// inline asm
	// inline asm
	shfl.idx.b32 %r244, %r236, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r248, %r237, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r252, %r238, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r256, %r239, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r260, %r240, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r264, %r241, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r268, %r242, %r6, %r275;
	// inline asm
	// inline asm
	shfl.idx.b32 %r272, %r243, %r6, %r275;
	// inline asm
	// inline asm
	mov.b64 %fd71, {%r244,%r248};
	// inline asm
	// inline asm
	mov.b64 %fd72, {%r252,%r256};
	// inline asm
	// inline asm
	mov.b64 %fd73, {%r260,%r264};
	// inline asm
	// inline asm
	mov.b64 %fd74, {%r268,%r272};
	// inline asm
	add.f64 	%fd13, %fd67, %fd71;
	add.f64 	%fd14, %fd68, %fd72;
	add.f64 	%fd15, %fd69, %fd73;
	add.f64 	%fd16, %fd70, %fd74;
	setp.ne.s32	%p4, %r1, 0;
	@%p4 bra 	BB15_14;

	shl.b64 	%rd45, %rd62, 3;
	add.s64 	%rd10, %rd36, %rd45;
	add.s64 	%rd7, %rd10, 8;
	add.s64 	%rd8, %rd10, 16;
	add.s64 	%rd9, %rd10, 24;
	ld.u64 	%rd58, [%rd10];

BB15_7:
	mov.u64 	%rd12, %rd58;
	mov.b64 	 %fd75, %rd12;
	add.f64 	%fd76, %fd13, %fd75;
	mov.b64 	 %rd46, %fd76;
	atom.cas.b64 	%rd58, [%rd10], %rd12, %rd46;
	setp.ne.s64	%p5, %rd12, %rd58;
	@%p5 bra 	BB15_7;

	ld.u64 	%rd59, [%rd10+8];

BB15_9:
	mov.u64 	%rd15, %rd59;
	mov.b64 	 %fd77, %rd15;
	add.f64 	%fd78, %fd14, %fd77;
	mov.b64 	 %rd47, %fd78;
	atom.cas.b64 	%rd59, [%rd7], %rd15, %rd47;
	setp.ne.s64	%p6, %rd15, %rd59;
	@%p6 bra 	BB15_9;

	ld.u64 	%rd60, [%rd10+16];

BB15_11:
	mov.u64 	%rd18, %rd60;
	mov.b64 	 %fd79, %rd18;
	add.f64 	%fd80, %fd15, %fd79;
	mov.b64 	 %rd48, %fd80;
	atom.cas.b64 	%rd60, [%rd8], %rd18, %rd48;
	setp.ne.s64	%p7, %rd18, %rd60;
	@%p7 bra 	BB15_11;

	ld.u64 	%rd61, [%rd10+24];

BB15_13:
	mov.u64 	%rd21, %rd61;
	mov.b64 	 %fd81, %rd21;
	add.f64 	%fd82, %fd16, %fd81;
	mov.b64 	 %rd49, %fd82;
	atom.cas.b64 	%rd61, [%rd9], %rd21, %rd49;
	setp.ne.s64	%p8, %rd21, %rd61;
	@%p8 bra 	BB15_13;

BB15_14:
	add.s64 	%rd62, %rd62, 4;
	sub.s64 	%rd50, %rd37, %rd62;
	setp.gt.s64	%p9, %rd50, 3;
	@%p9 bra 	BB15_2;

BB15_15:
	setp.ge.s64	%p10, %rd62, %rd37;
	@%p10 bra 	BB15_23;

	mov.u32 	%r284, %ctaid.x;
	mov.u32 	%r285, %ntid.x;
	mov.u32 	%r286, %tid.x;
	mad.lo.s32 	%r287, %r285, %r284, %r286;
	cvt.u64.u32	%rd25, %r287;
	mov.u32 	%r288, %nctaid.x;
	mul.lo.s32 	%r289, %r288, %r285;
	cvt.u64.u32	%rd26, %r289;
	and.b32  	%r7, %r286, 31;
	add.s32 	%r290, %r287, 16;
	shr.s32 	%r291, %r290, 31;
	shr.u32 	%r292, %r291, 27;
	add.s32 	%r293, %r290, %r292;
	and.b32  	%r294, %r293, -32;
	sub.s32 	%r8, %r290, %r294;
	add.s32 	%r295, %r287, 8;
	shr.s32 	%r296, %r295, 31;
	shr.u32 	%r297, %r296, 27;
	add.s32 	%r298, %r295, %r297;
	and.b32  	%r299, %r298, -32;
	sub.s32 	%r9, %r295, %r299;
	add.s32 	%r300, %r287, 4;
	shr.s32 	%r301, %r300, 31;
	shr.u32 	%r302, %r301, 27;
	add.s32 	%r303, %r300, %r302;
	and.b32  	%r304, %r303, -32;
	sub.s32 	%r10, %r300, %r304;
	add.s32 	%r305, %r287, 2;
	shr.s32 	%r306, %r305, 31;
	shr.u32 	%r307, %r306, 27;
	add.s32 	%r308, %r305, %r307;
	and.b32  	%r309, %r308, -32;
	sub.s32 	%r11, %r305, %r309;
	add.s32 	%r310, %r287, 1;
	shr.s32 	%r311, %r310, 31;
	shr.u32 	%r312, %r311, 27;
	add.s32 	%r313, %r310, %r312;
	and.b32  	%r314, %r313, -32;
	sub.s32 	%r12, %r310, %r314;

BB15_17:
	mov.f64 	%fd103, 0d0000000000000000;
	mov.f64 	%fd104, %fd103;
	setp.ge.s64	%p11, %rd25, %rd38;
	mov.u64 	%rd63, %rd25;
	@%p11 bra 	BB15_19;

BB15_18:
	mov.u64 	%rd28, %rd63;
	mul.lo.s64 	%rd51, %rd28, %rd37;
	add.s64 	%rd52, %rd51, %rd62;
	shl.b64 	%rd53, %rd52, 3;
	add.s64 	%rd54, %rd35, %rd53;
	ld.f64 	%fd85, [%rd54];
	add.f64 	%fd104, %fd104, %fd85;
	add.s64 	%rd29, %rd26, %rd28;
	setp.lt.s64	%p12, %rd29, %rd38;
	mov.u64 	%rd63, %rd29;
	mov.f64 	%fd103, %fd104;
	@%p12 bra 	BB15_18;

BB15_19:
	// inline asm
	mov.b64 {%r315,%r316}, %fd103;
	// inline asm
	mov.u32 	%r372, 31;
	// inline asm
	shfl.idx.b32 %r317, %r315, %r8, %r372;
	// inline asm
	// inline asm
	shfl.idx.b32 %r321, %r316, %r8, %r372;
	// inline asm
	// inline asm
	mov.b64 %fd87, {%r317,%r321};
	// inline asm
	add.f64 	%fd88, %fd103, %fd87;
	// inline asm
	mov.b64 {%r327,%r328}, %fd88;
	// inline asm
	// inline asm
	shfl.idx.b32 %r329, %r327, %r9, %r372;
	// inline asm
	// inline asm
	shfl.idx.b32 %r333, %r328, %r9, %r372;
	// inline asm
	// inline asm
	mov.b64 %fd89, {%r329,%r333};
	// inline asm
	add.f64 	%fd90, %fd88, %fd89;
	// inline asm
	mov.b64 {%r339,%r340}, %fd90;
	// inline asm
	// inline asm
	shfl.idx.b32 %r341, %r339, %r10, %r372;
	// inline asm
	// inline asm
	shfl.idx.b32 %r345, %r340, %r10, %r372;
	// inline asm
	// inline asm
	mov.b64 %fd91, {%r341,%r345};
	// inline asm
	add.f64 	%fd92, %fd90, %fd91;
	// inline asm
	mov.b64 {%r351,%r352}, %fd92;
	// inline asm
	// inline asm
	shfl.idx.b32 %r353, %r351, %r11, %r372;
	// inline asm
	// inline asm
	shfl.idx.b32 %r357, %r352, %r11, %r372;
	// inline asm
	// inline asm
	mov.b64 %fd93, {%r353,%r357};
	// inline asm
	add.f64 	%fd94, %fd92, %fd93;
	// inline asm
	mov.b64 {%r363,%r364}, %fd94;
	// inline asm
	// inline asm
	shfl.idx.b32 %r365, %r363, %r12, %r372;
	// inline asm
	// inline asm
	shfl.idx.b32 %r369, %r364, %r12, %r372;
	// inline asm
	// inline asm
	mov.b64 %fd95, {%r365,%r369};
	// inline asm
	setp.ne.s32	%p13, %r7, 0;
	@%p13 bra 	BB15_22;

	shl.b64 	%rd55, %rd62, 3;
	add.s64 	%rd30, %rd36, %rd55;
	add.f64 	%fd22, %fd94, %fd95;
	ld.u64 	%rd64, [%rd30];

BB15_21:
	mov.u64 	%rd32, %rd64;
	mov.b64 	 %fd96, %rd32;
	add.f64 	%fd97, %fd22, %fd96;
	mov.b64 	 %rd56, %fd97;
	atom.cas.b64 	%rd64, [%rd30], %rd32, %rd56;
	setp.ne.s64	%p14, %rd32, %rd64;
	@%p14 bra 	BB15_21;

BB15_22:
	add.s64 	%rd62, %rd62, 1;
	setp.lt.s64	%p15, %rd62, %rd37;
	@%p15 bra 	BB15_17;

BB15_23:
	ret;
}

	// .globl	identity
.visible .entry identity(
	.param .u64 identity_param_0,
	.param .u64 identity_param_1,
	.param .u64 identity_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd4, [identity_param_0];
	ld.param.u64 	%rd2, [identity_param_1];
	ld.param.u64 	%rd3, [identity_param_2];
	cvta.to.global.u64 	%rd5, %rd4;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd6, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd7, %r3, %r2;
	add.s64 	%rd1, %rd7, %rd6;
	ld.global.s32 	%rd8, [%rd5];
	setp.ge.s64	%p1, %rd1, %rd8;
	@%p1 bra 	BB16_2;

	cvta.to.global.u64 	%rd9, %rd2;
	shl.b64 	%rd10, %rd1, 2;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.u32 	%r4, [%rd11];
	cvta.to.global.u64 	%rd12, %rd3;
	add.s64 	%rd13, %rd12, %rd10;
	st.global.u32 	[%rd13], %r4;

BB16_2:
	ret;
}

	// .globl	intArrayIdentity
.visible .entry intArrayIdentity(
	.param .u64 intArrayIdentity_param_0,
	.param .u64 intArrayIdentity_param_1,
	.param .u64 intArrayIdentity_param_2,
	.param .u64 intArrayIdentity_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<23>;


	ld.param.u64 	%rd12, [intArrayIdentity_param_0];
	ld.param.u64 	%rd10, [intArrayIdentity_param_1];
	ld.param.u64 	%rd11, [intArrayIdentity_param_2];
	ld.param.u64 	%rd13, [intArrayIdentity_param_3];
	cvta.to.global.u64 	%rd1, %rd13;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r5, %r1, %r2, %r3;
	cvta.to.global.u64 	%rd14, %rd12;
	ld.global.u32 	%r6, [%rd14];
	setp.ge.s32	%p1, %r5, %r6;
	@%p1 bra 	BB17_4;

	ld.global.u32 	%r4, [%rd1];
	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB17_4;

	cvta.to.global.u64 	%rd16, %rd11;
	cvta.to.global.u64 	%rd17, %rd10;
	mul.lo.s32 	%r8, %r4, %r5;
	mul.wide.s32 	%rd18, %r8, 4;
	add.s64 	%rd21, %rd16, %rd18;
	add.s64 	%rd20, %rd17, %rd18;
	mov.u64 	%rd22, 0;

BB17_3:
	ld.global.u32 	%r9, [%rd20];
	st.global.u32 	[%rd21], %r9;
	ld.global.s32 	%rd19, [%rd1];
	add.s64 	%rd21, %rd21, 4;
	add.s64 	%rd20, %rd20, 4;
	add.s64 	%rd22, %rd22, 1;
	setp.lt.s64	%p3, %rd22, %rd19;
	@%p3 bra 	BB17_3;

BB17_4:
	ret;
}

	// .globl	IntDataPointIdentity
.visible .entry IntDataPointIdentity(
	.param .u64 IntDataPointIdentity_param_0,
	.param .u64 IntDataPointIdentity_param_1,
	.param .u64 IntDataPointIdentity_param_2,
	.param .u64 IntDataPointIdentity_param_3,
	.param .u64 IntDataPointIdentity_param_4,
	.param .u64 IntDataPointIdentity_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<39>;


	ld.param.u64 	%rd15, [IntDataPointIdentity_param_0];
	ld.param.u64 	%rd11, [IntDataPointIdentity_param_1];
	ld.param.u64 	%rd12, [IntDataPointIdentity_param_2];
	ld.param.u64 	%rd13, [IntDataPointIdentity_param_3];
	ld.param.u64 	%rd14, [IntDataPointIdentity_param_4];
	ld.param.u64 	%rd16, [IntDataPointIdentity_param_5];
	cvta.to.global.u64 	%rd1, %rd16;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd17, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd18, %r3, %r2;
	add.s64 	%rd2, %rd18, %rd17;
	cvta.to.global.u64 	%rd19, %rd15;
	ld.global.s32 	%rd20, [%rd19];
	setp.ge.s64	%p1, %rd2, %rd20;
	@%p1 bra 	BB18_5;

	ld.global.u32 	%r4, [%rd1];
	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB18_4;

	cvta.to.global.u64 	%rd22, %rd13;
	cvta.to.global.u64 	%rd23, %rd11;
	cvt.s64.s32	%rd27, %r4;
	mul.lo.s64 	%rd28, %rd2, %rd27;
	shl.b64 	%rd29, %rd28, 2;
	add.s64 	%rd37, %rd22, %rd29;
	add.s64 	%rd36, %rd23, %rd29;
	mov.u64 	%rd38, 0;

BB18_3:
	ld.global.u32 	%r5, [%rd36];
	st.global.u32 	[%rd37], %r5;
	ld.global.s32 	%rd30, [%rd1];
	add.s64 	%rd37, %rd37, 4;
	add.s64 	%rd36, %rd36, 4;
	add.s64 	%rd38, %rd38, 1;
	setp.lt.s64	%p3, %rd38, %rd30;
	@%p3 bra 	BB18_3;

BB18_4:
	cvta.to.global.u64 	%rd31, %rd14;
	cvta.to.global.u64 	%rd32, %rd12;
	shl.b64 	%rd33, %rd2, 2;
	add.s64 	%rd34, %rd32, %rd33;
	ld.global.u32 	%r6, [%rd34];
	add.s64 	%rd35, %rd31, %rd33;
	st.global.u32 	[%rd35], %r6;

BB18_5:
	ret;
}

	// .globl	intArrayAdd
.visible .entry intArrayAdd(
	.param .u64 intArrayAdd_param_0,
	.param .u64 intArrayAdd_param_1,
	.param .u64 intArrayAdd_param_2,
	.param .u64 intArrayAdd_param_3,
	.param .u64 intArrayAdd_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<37>;


	ld.param.u64 	%rd16, [intArrayAdd_param_0];
	ld.param.u64 	%rd13, [intArrayAdd_param_1];
	ld.param.u64 	%rd14, [intArrayAdd_param_2];
	ld.param.u64 	%rd15, [intArrayAdd_param_3];
	ld.param.u64 	%rd17, [intArrayAdd_param_4];
	cvta.to.global.u64 	%rd1, %rd17;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd18, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd19, %r3, %r2;
	add.s64 	%rd20, %rd19, %rd18;
	cvta.to.global.u64 	%rd21, %rd16;
	ld.global.s32 	%rd22, [%rd21];
	setp.ge.s64	%p1, %rd20, %rd22;
	@%p1 bra 	BB19_4;

	ld.global.u32 	%r4, [%rd1];
	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB19_4;

	cvta.to.global.u64 	%rd24, %rd14;
	cvta.to.global.u64 	%rd35, %rd15;
	cvta.to.global.u64 	%rd25, %rd13;
	cvt.s64.s32	%rd29, %r4;
	mul.lo.s64 	%rd30, %rd20, %rd29;
	shl.b64 	%rd31, %rd30, 2;
	add.s64 	%rd34, %rd24, %rd31;
	add.s64 	%rd33, %rd25, %rd31;
	mov.u64 	%rd36, 0;

BB19_3:
	ld.global.u32 	%r5, [%rd35];
	ld.global.u32 	%r6, [%rd33];
	add.s32 	%r7, %r5, %r6;
	st.global.u32 	[%rd34], %r7;
	ld.global.s32 	%rd32, [%rd1];
	add.s64 	%rd35, %rd35, 4;
	add.s64 	%rd34, %rd34, 4;
	add.s64 	%rd33, %rd33, 4;
	add.s64 	%rd36, %rd36, 1;
	setp.lt.s64	%p3, %rd36, %rd32;
	@%p3 bra 	BB19_3;

BB19_4:
	ret;
}

	// .globl	vectorLength
.visible .entry vectorLength(
	.param .u64 vectorLength_param_0,
	.param .u64 vectorLength_param_1,
	.param .u64 vectorLength_param_2,
	.param .u64 vectorLength_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd5, [vectorLength_param_0];
	ld.param.u64 	%rd2, [vectorLength_param_1];
	ld.param.u64 	%rd3, [vectorLength_param_2];
	ld.param.u64 	%rd4, [vectorLength_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd7, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd8, %r3, %r2;
	add.s64 	%rd1, %rd8, %rd7;
	ld.global.s32 	%rd9, [%rd6];
	setp.ge.s64	%p1, %rd1, %rd9;
	@%p1 bra 	BB20_2;

	cvta.to.global.u64 	%rd10, %rd2;
	shl.b64 	%rd11, %rd1, 3;
	add.s64 	%rd12, %rd10, %rd11;
	ld.global.f64 	%fd1, [%rd12];
	cvta.to.global.u64 	%rd13, %rd3;
	add.s64 	%rd14, %rd13, %rd11;
	ld.global.f64 	%fd2, [%rd14];
	mul.f64 	%fd3, %fd2, %fd2;
	fma.rn.f64 	%fd4, %fd1, %fd1, %fd3;
	sqrt.rn.f64 	%fd5, %fd4;
	cvta.to.global.u64 	%rd15, %rd4;
	add.s64 	%rd16, %rd15, %rd11;
	st.global.f64 	[%rd16], %fd5;

BB20_2:
	ret;
}

	// .globl	plusMinus
.visible .entry plusMinus(
	.param .u64 plusMinus_param_0,
	.param .u64 plusMinus_param_1,
	.param .u64 plusMinus_param_2,
	.param .u64 plusMinus_param_3,
	.param .u64 plusMinus_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<4>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd6, [plusMinus_param_0];
	ld.param.u64 	%rd2, [plusMinus_param_1];
	ld.param.u64 	%rd3, [plusMinus_param_2];
	ld.param.u64 	%rd4, [plusMinus_param_3];
	ld.param.u64 	%rd5, [plusMinus_param_4];
	cvta.to.global.u64 	%rd7, %rd6;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd8, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd9, %r3, %r2;
	add.s64 	%rd1, %rd9, %rd8;
	ld.global.s32 	%rd10, [%rd7];
	setp.ge.s64	%p1, %rd1, %rd10;
	@%p1 bra 	BB21_2;

	cvta.to.global.u64 	%rd11, %rd2;
	shl.b64 	%rd12, %rd1, 3;
	add.s64 	%rd13, %rd11, %rd12;
	cvta.to.global.u64 	%rd14, %rd3;
	shl.b64 	%rd15, %rd1, 2;
	add.s64 	%rd16, %rd14, %rd15;
	ld.global.f32 	%f1, [%rd16];
	cvt.f64.f32	%fd1, %f1;
	ld.global.f64 	%fd2, [%rd13];
	sub.f64 	%fd3, %fd2, %fd1;
	cvta.to.global.u64 	%rd17, %rd4;
	add.s64 	%rd18, %rd17, %rd12;
	st.global.f64 	[%rd18], %fd3;
	ld.global.f32 	%f2, [%rd16];
	cvt.f64.f32	%fd4, %f2;
	ld.global.f64 	%fd5, [%rd13];
	add.f64 	%fd6, %fd5, %fd4;
	cvt.rn.f32.f64	%f3, %fd6;
	cvta.to.global.u64 	%rd19, %rd5;
	add.s64 	%rd20, %rd19, %rd15;
	st.global.f32 	[%rd20], %f3;

BB21_2:
	ret;
}

	// .globl	applyLinearFunction
.visible .entry applyLinearFunction(
	.param .u64 applyLinearFunction_param_0,
	.param .u64 applyLinearFunction_param_1,
	.param .u64 applyLinearFunction_param_2,
	.param .u64 applyLinearFunction_param_3,
	.param .u64 applyLinearFunction_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<18>;


	ld.param.u64 	%rd6, [applyLinearFunction_param_0];
	ld.param.u64 	%rd2, [applyLinearFunction_param_1];
	ld.param.u64 	%rd3, [applyLinearFunction_param_2];
	ld.param.u64 	%rd4, [applyLinearFunction_param_3];
	ld.param.u64 	%rd5, [applyLinearFunction_param_4];
	cvta.to.global.u64 	%rd7, %rd6;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd8, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd9, %r3, %r2;
	add.s64 	%rd1, %rd9, %rd8;
	ld.global.s32 	%rd10, [%rd7];
	setp.ge.s64	%p1, %rd1, %rd10;
	@%p1 bra 	BB22_2;

	cvta.to.global.u64 	%rd11, %rd4;
	ld.global.u16 	%r4, [%rd11];
	cvta.to.global.u64 	%rd12, %rd5;
	ld.global.s16 	%r5, [%rd12];
	cvta.to.global.u64 	%rd13, %rd2;
	shl.b64 	%rd14, %rd1, 1;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.s16 	%r6, [%rd15];
	mad.lo.s32 	%r7, %r6, %r5, %r4;
	cvta.to.global.u64 	%rd16, %rd3;
	add.s64 	%rd17, %rd16, %rd14;
	st.global.u16 	[%rd17], %r7;

BB22_2:
	ret;
}

	// .globl	blockXOR
.visible .entry blockXOR(
	.param .u64 blockXOR_param_0,
	.param .u64 blockXOR_param_1,
	.param .u64 blockXOR_param_2,
	.param .u64 blockXOR_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd5, [blockXOR_param_0];
	ld.param.u64 	%rd2, [blockXOR_param_1];
	ld.param.u64 	%rd3, [blockXOR_param_2];
	ld.param.u64 	%rd4, [blockXOR_param_3];
	cvta.to.global.u64 	%rd6, %rd5;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd7, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd8, %r3, %r2;
	add.s64 	%rd1, %rd8, %rd7;
	shl.b64 	%rd9, %rd1, 3;
	ld.global.s32 	%rd10, [%rd6];
	setp.ge.s64	%p1, %rd9, %rd10;
	@%p1 bra 	BB23_2;

	cvta.to.global.u64 	%rd11, %rd4;
	cvta.to.global.u64 	%rd12, %rd2;
	add.s64 	%rd14, %rd12, %rd9;
	ld.global.u64 	%rd15, [%rd11];
	ld.global.u64 	%rd16, [%rd14];
	xor.b64  	%rd17, %rd15, %rd16;
	cvta.to.global.u64 	%rd18, %rd3;
	add.s64 	%rd19, %rd18, %rd9;
	st.global.u64 	[%rd19], %rd17;

BB23_2:
	ret;
}

	// .globl	multiplyBy2
.visible .entry multiplyBy2(
	.param .u64 multiplyBy2_param_0,
	.param .u64 multiplyBy2_param_1,
	.param .u64 multiplyBy2_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd3, [multiplyBy2_param_0];
	ld.param.u64 	%rd1, [multiplyBy2_param_1];
	ld.param.u64 	%rd2, [multiplyBy2_param_2];
	cvta.to.global.u64 	%rd4, %rd3;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r1, %r2, %r3, %r4;
	ld.global.u32 	%r5, [%rd4];
	setp.ge.s32	%p1, %r1, %r5;
	@%p1 bra 	BB24_2;

	cvta.to.global.u64 	%rd5, %rd1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.u32 	%r6, [%rd7];
	shl.b32 	%r7, %r6, 1;
	cvta.to.global.u64 	%rd8, %rd2;
	add.s64 	%rd9, %rd8, %rd6;
	st.global.u32 	[%rd9], %r7;

BB24_2:
	ret;
}

	// .globl	multiplyBy2_l
.visible .entry multiplyBy2_l(
	.param .u64 multiplyBy2_l_param_0,
	.param .u64 multiplyBy2_l_param_1,
	.param .u64 multiplyBy2_l_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd4, [multiplyBy2_l_param_0];
	ld.param.u64 	%rd2, [multiplyBy2_l_param_1];
	ld.param.u64 	%rd3, [multiplyBy2_l_param_2];
	cvta.to.global.u64 	%rd5, %rd4;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd6, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd7, %r3, %r2;
	add.s64 	%rd1, %rd7, %rd6;
	ld.global.s32 	%rd8, [%rd5];
	setp.ge.s64	%p1, %rd1, %rd8;
	@%p1 bra 	BB25_2;

	cvta.to.global.u64 	%rd9, %rd2;
	shl.b64 	%rd10, %rd1, 3;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.u64 	%rd12, [%rd11];
	shl.b64 	%rd13, %rd12, 1;
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd10;
	st.global.u64 	[%rd15], %rd13;

BB25_2:
	ret;
}

	// .globl	multiplyBy2_self
.visible .entry multiplyBy2_self(
	.param .u64 multiplyBy2_self_param_0,
	.param .u64 multiplyBy2_self_param_1,
	.param .u64 multiplyBy2_self_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd3, [multiplyBy2_self_param_0];
	ld.param.u64 	%rd1, [multiplyBy2_self_param_1];
	ld.param.u64 	%rd2, [multiplyBy2_self_param_2];
	cvta.to.global.u64 	%rd4, %rd3;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r1, %r2, %r3, %r4;
	ld.global.u32 	%r5, [%rd4];
	setp.ge.s32	%p1, %r1, %r5;
	@%p1 bra 	BB26_2;

	cvta.to.global.u64 	%rd5, %rd1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.u32 	%r6, [%rd7];
	shl.b32 	%r7, %r6, 1;
	cvta.to.global.u64 	%rd8, %rd2;
	add.s64 	%rd9, %rd8, %rd6;
	st.global.u32 	[%rd9], %r7;
	st.global.u32 	[%rd7], %r7;

BB26_2:
	ret;
}

	// .globl	sum
.visible .entry sum(
	.param .u64 sum_param_0,
	.param .u64 sum_param_1,
	.param .u64 sum_param_2,
	.param .u64 sum_param_3,
	.param .u64 sum_param_4
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<43>;


	ld.param.u64 	%rd16, [sum_param_0];
	ld.param.u64 	%rd17, [sum_param_1];
	ld.param.u64 	%rd15, [sum_param_2];
	ld.param.u64 	%rd18, [sum_param_3];
	cvta.to.global.u64 	%rd39, %rd17;
	cvta.to.global.u64 	%rd2, %rd16;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd19, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd20, %r3, %r2;
	add.s64 	%rd3, %rd20, %rd19;
	cvta.to.global.u64 	%rd21, %rd18;
	ld.global.u32 	%r13, [%rd21];
	setp.eq.s32	%p1, %r13, 0;
	@%p1 bra 	BB27_5;

	setp.ne.s64	%p2, %rd3, 0;
	@%p2 bra 	BB27_12;

	ld.global.s32 	%rd23, [%rd2];
	setp.lt.s64	%p3, %rd23, 16384;
	selp.b64	%rd4, %rd23, 16384, %p3;
	mov.u32 	%r24, 0;
	mov.u32 	%r25, %r24;
	mov.u64 	%rd40, 0;
	setp.lt.s64	%p4, %rd4, 1;
	@%p4 bra 	BB27_4;

BB27_3:
	ld.global.u32 	%r16, [%rd39];
	add.s32 	%r25, %r16, %r25;
	add.s64 	%rd39, %rd39, 4;
	add.s64 	%rd40, %rd40, 1;
	setp.lt.s64	%p5, %rd40, %rd4;
	mov.u32 	%r24, %r25;
	@%p5 bra 	BB27_3;

BB27_4:
	cvta.to.global.u64 	%rd24, %rd15;
	st.global.u32 	[%rd24], %r24;
	bra.uni 	BB27_12;

BB27_5:
	ld.global.u32 	%r26, [%rd2];
	cvt.s64.s32	%rd25, %r26;
	setp.ge.s64	%p6, %rd3, %rd25;
	@%p6 bra 	BB27_12;

	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r18, %r17, %r3;
	setp.eq.s32	%p7, %r18, 16384;
	@%p7 bra 	BB27_8;

	mov.u64 	%rd26, $str;
	cvta.global.u64 	%rd27, %rd26;
	mov.u64 	%rd28, $str1;
	cvta.global.u64 	%rd29, %rd28;
	mov.u64 	%rd30, __T20;
	cvta.global.u64 	%rd31, %rd30;
	mov.u32 	%r19, 147;
	mov.u64 	%rd32, 1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd29;
	.param .b32 param2;
	st.param.b32	[param2+0], %r19;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd31;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd32;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0
	ld.global.u32 	%r26, [%rd2];

BB27_8:
	cvt.s64.s32	%rd9, %r26;
	mov.u32 	%r27, 0;
	setp.ge.s64	%p8, %rd3, %rd9;
	@%p8 bra 	BB27_11;

	add.s64 	%rd35, %rd20, %rd19;
	shl.b64 	%rd36, %rd35, 2;
	add.s64 	%rd41, %rd39, %rd36;
	mov.u32 	%r27, 0;
	mov.u64 	%rd42, %rd3;

BB27_10:
	mov.u64 	%rd12, %rd42;
	ld.global.u32 	%r22, [%rd41];
	add.s32 	%r27, %r22, %r27;
	add.s64 	%rd41, %rd41, 65536;
	add.s64 	%rd14, %rd12, 16384;
	setp.lt.s64	%p9, %rd14, %rd9;
	mov.u64 	%rd42, %rd14;
	@%p9 bra 	BB27_10;

BB27_11:
	shl.b64 	%rd37, %rd3, 2;
	add.s64 	%rd38, %rd39, %rd37;
	st.global.u32 	[%rd38], %r27;

BB27_12:
	ret;
}

	// .globl	sum_l
.visible .entry sum_l(
	.param .u64 sum_l_param_0,
	.param .u64 sum_l_param_1,
	.param .u64 sum_l_param_2,
	.param .u64 sum_l_param_3,
	.param .u64 sum_l_param_4
)
{
	.reg .pred 	%p<10>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<59>;


	ld.param.u64 	%rd23, [sum_l_param_0];
	ld.param.u64 	%rd24, [sum_l_param_1];
	ld.param.u64 	%rd22, [sum_l_param_2];
	ld.param.u64 	%rd25, [sum_l_param_3];
	cvta.to.global.u64 	%rd51, %rd24;
	cvta.to.global.u64 	%rd2, %rd23;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd26, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd27, %r3, %r2;
	add.s64 	%rd3, %rd27, %rd26;
	cvta.to.global.u64 	%rd28, %rd25;
	ld.global.u32 	%r4, [%rd28];
	setp.eq.s32	%p1, %r4, 0;
	@%p1 bra 	BB28_5;

	setp.ne.s64	%p2, %rd3, 0;
	@%p2 bra 	BB28_11;

	ld.global.s32 	%rd32, [%rd2];
	setp.lt.s64	%p3, %rd32, 16384;
	selp.b64	%rd4, %rd32, 16384, %p3;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd55, %rd54;
	mov.u64 	%rd52, %rd54;
	setp.lt.s64	%p4, %rd4, 1;
	@%p4 bra 	BB28_4;

BB28_3:
	ld.global.u64 	%rd33, [%rd51];
	add.s64 	%rd55, %rd33, %rd55;
	add.s64 	%rd51, %rd51, 8;
	add.s64 	%rd52, %rd52, 1;
	setp.lt.s64	%p5, %rd52, %rd4;
	mov.u64 	%rd54, %rd55;
	@%p5 bra 	BB28_3;

BB28_4:
	cvta.to.global.u64 	%rd34, %rd22;
	st.global.u64 	[%rd34], %rd54;
	bra.uni 	BB28_11;

BB28_5:
	setp.gt.s64	%p6, %rd3, 16383;
	@%p6 bra 	BB28_11;

	mov.u32 	%r5, %nctaid.x;
	mul.lo.s32 	%r6, %r5, %r3;
	setp.eq.s32	%p7, %r6, 16384;
	@%p7 bra 	BB28_8;

	mov.u64 	%rd35, $str;
	cvta.global.u64 	%rd36, %rd35;
	mov.u64 	%rd37, $str1;
	cvta.global.u64 	%rd38, %rd37;
	mov.u64 	%rd39, __T21;
	cvta.global.u64 	%rd40, %rd39;
	mov.u32 	%r7, 171;
	mov.u64 	%rd41, 1;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd36;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd38;
	.param .b32 param2;
	st.param.b32	[param2+0], %r7;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd40;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd41;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB28_8:
	add.s64 	%rd58, %rd3, 16384;
	ld.global.s32 	%rd42, [%rd2];
	setp.ge.s64	%p8, %rd58, %rd42;
	@%p8 bra 	BB28_11;

	shl.b64 	%rd46, %rd3, 3;
	add.s64 	%rd47, %rd46, %rd51;
	add.s64 	%rd13, %rd51, %rd46;
	ld.global.u64 	%rd57, [%rd13];
	add.s64 	%rd56, %rd47, 131072;

BB28_10:
	ld.global.u64 	%rd49, [%rd56];
	add.s64 	%rd57, %rd57, %rd49;
	st.global.u64 	[%rd13], %rd57;
	ld.global.s32 	%rd50, [%rd2];
	add.s64 	%rd56, %rd56, 131072;
	add.s64 	%rd58, %rd58, 16384;
	setp.lt.s64	%p9, %rd58, %rd50;
	@%p9 bra 	BB28_10;

BB28_11:
	ret;
}

	// .globl	intArraySum
.visible .entry intArraySum(
	.param .u64 intArraySum_param_0,
	.param .u64 intArraySum_param_1,
	.param .u64 intArraySum_param_2,
	.param .u64 intArraySum_param_3,
	.param .u64 intArraySum_param_4,
	.param .u64 intArraySum_param_5
)
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<39>;
	.reg .b64 	%rd<90>;


	ld.param.u64 	%rd35, [intArraySum_param_0];
	ld.param.u64 	%rd36, [intArraySum_param_1];
	ld.param.u64 	%rd37, [intArraySum_param_2];
	ld.param.u64 	%rd38, [intArraySum_param_3];
	ld.param.u64 	%rd39, [intArraySum_param_4];
	cvta.to.global.u64 	%rd1, %rd37;
	cvta.to.global.u64 	%rd2, %rd36;
	cvta.to.global.u64 	%rd3, %rd38;
	cvta.to.global.u64 	%rd4, %rd35;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd40, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd41, %r3, %r2;
	add.s64 	%rd5, %rd41, %rd40;
	cvta.to.global.u64 	%rd42, %rd39;
	ld.global.u32 	%r20, [%rd42];
	setp.eq.s32	%p1, %r20, 0;
	@%p1 bra 	BB29_10;

	setp.ne.s64	%p2, %rd5, 0;
	@%p2 bra 	BB29_20;

	ld.global.s32 	%rd43, [%rd4];
	setp.lt.s64	%p3, %rd43, 16384;
	selp.b64	%rd6, %rd43, 16384, %p3;
	setp.lt.s64	%p4, %rd6, 1;
	@%p4 bra 	BB29_20;

	ld.global.u32 	%r36, [%rd3];
	mov.u64 	%rd44, 0;
	mov.u64 	%rd79, %rd44;

BB29_4:
	mov.u32 	%r32, %r36;
	mov.u32 	%r5, %r32;
	setp.gt.s32	%p5, %r5, 0;
	setp.eq.s64	%p6, %rd79, 0;
	and.pred  	%p7, %p6, %p5;
	mov.u64 	%rd78, %rd44;
	mov.u32 	%r34, %r5;
	mov.u64 	%rd83, %rd1;
	@!%p7 bra 	BB29_6;
	bra.uni 	BB29_5;

BB29_5:
	mov.u64 	%rd8, %rd83;
	mov.u64 	%rd9, %rd78;
	mov.u32 	%r21, 0;
	st.global.u32 	[%rd8], %r21;
	ld.global.u32 	%r6, [%rd3];
	cvt.s64.s32	%rd46, %r6;
	add.s64 	%rd10, %rd8, 4;
	add.s64 	%rd11, %rd9, 1;
	setp.lt.s64	%p8, %rd11, %rd46;
	mov.u64 	%rd78, %rd11;
	mov.u32 	%r34, %r6;
	mov.u64 	%rd83, %rd10;
	@%p8 bra 	BB29_5;

BB29_6:
	mov.u32 	%r31, %r34;
	mov.u32 	%r35, %r31;
	setp.lt.s32	%p9, %r35, 1;
	@%p9 bra 	BB29_9;

	cvt.s64.s32	%rd48, %r5;
	mul.lo.s64 	%rd49, %rd79, %rd48;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd80, %rd2, %rd50;
	mov.u64 	%rd84, 0;
	mov.u64 	%rd82, %rd1;

BB29_8:
	ld.global.u32 	%r22, [%rd82];
	ld.global.u32 	%r23, [%rd80];
	add.s32 	%r24, %r22, %r23;
	st.global.u32 	[%rd82], %r24;
	ld.global.u32 	%r35, [%rd3];
	cvt.s64.s32	%rd51, %r35;
	add.s64 	%rd82, %rd82, 4;
	add.s64 	%rd80, %rd80, 4;
	add.s64 	%rd84, %rd84, 1;
	setp.lt.s64	%p10, %rd84, %rd51;
	@%p10 bra 	BB29_8;

BB29_9:
	mov.u32 	%r36, %r35;
	add.s64 	%rd79, %rd79, 1;
	setp.lt.s64	%p11, %rd79, %rd6;
	@%p11 bra 	BB29_4;
	bra.uni 	BB29_20;

BB29_10:
	ld.global.u32 	%r37, [%rd4];
	cvt.s64.s32	%rd52, %r37;
	setp.ge.s64	%p12, %rd5, %rd52;
	@%p12 bra 	BB29_20;

	mov.u32 	%r25, %nctaid.x;
	mul.lo.s32 	%r26, %r25, %r3;
	setp.eq.s32	%p13, %r26, 16384;
	@%p13 bra 	BB29_13;

	mov.u64 	%rd53, $str;
	cvta.global.u64 	%rd54, %rd53;
	mov.u64 	%rd55, $str1;
	cvta.global.u64 	%rd56, %rd55;
	mov.u64 	%rd57, __T22;
	cvta.global.u64 	%rd58, %rd57;
	mov.u32 	%r27, 194;
	mov.u64 	%rd59, 1;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd54;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd56;
	.param .b32 param2;
	st.param.b32	[param2+0], %r27;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd58;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd59;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2
	ld.global.u32 	%r37, [%rd4];

BB29_13:
	ld.global.u32 	%r38, [%rd3];
	cvt.s64.s32	%rd60, %r37;
	add.s64 	%rd86, %rd5, 16384;
	setp.ge.s64	%p14, %rd86, %rd60;
	@%p14 bra 	BB29_20;

	add.s64 	%rd22, %rd5, 16384;
	cvt.s64.s32	%rd64, %r38;
	mul.lo.s64 	%rd65, %rd5, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd23, %rd2, %rd66;
	mov.u64 	%rd85, 0;

BB29_15:
	setp.lt.s32	%p15, %r38, 1;
	@%p15 bra 	BB29_19;

	shl.b64 	%rd68, %rd85, 14;
	add.s64 	%rd69, %rd22, %rd68;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd2, %rd70;
	cvt.s64.s32	%rd72, %r38;
	mul.lo.s64 	%rd73, %rd5, %rd72;
	shl.b64 	%rd74, %rd73, 2;
	add.s64 	%rd88, %rd71, %rd74;
	mov.u64 	%rd89, 0;
	mov.u64 	%rd87, %rd23;

BB29_17:
	mov.u64 	%rd27, %rd87;
	ld.global.u32 	%r28, [%rd27];
	ld.global.u32 	%r29, [%rd88];
	add.s32 	%r30, %r28, %r29;
	st.global.u32 	[%rd27], %r30;
	ld.global.u32 	%r38, [%rd3];
	cvt.s64.s32	%rd75, %r38;
	add.s64 	%rd88, %rd88, 4;
	add.s64 	%rd31, %rd27, 4;
	add.s64 	%rd89, %rd89, 1;
	setp.lt.s64	%p16, %rd89, %rd75;
	mov.u64 	%rd87, %rd31;
	@%p16 bra 	BB29_17;

	ld.global.u32 	%r37, [%rd4];

BB29_19:
	cvt.s64.s32	%rd76, %r37;
	add.s64 	%rd86, %rd86, 16384;
	setp.lt.s64	%p17, %rd86, %rd76;
	add.s64 	%rd85, %rd85, 1;
	@%p17 bra 	BB29_15;

BB29_20:
	ret;
}

	// .globl	DataPointMap
.visible .entry DataPointMap(
	.param .u64 DataPointMap_param_0,
	.param .u64 DataPointMap_param_1,
	.param .u64 DataPointMap_param_2,
	.param .u64 DataPointMap_param_3,
	.param .u64 DataPointMap_param_4,
	.param .u64 DataPointMap_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<5>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<37>;


	ld.param.u64 	%rd16, [DataPointMap_param_0];
	ld.param.u64 	%rd13, [DataPointMap_param_1];
	ld.param.u64 	%rd14, [DataPointMap_param_3];
	ld.param.u64 	%rd15, [DataPointMap_param_4];
	ld.param.u64 	%rd17, [DataPointMap_param_5];
	cvta.to.global.u64 	%rd1, %rd17;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd18, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd19, %r3, %r2;
	add.s64 	%rd20, %rd19, %rd18;
	cvta.to.global.u64 	%rd21, %rd16;
	ld.global.s32 	%rd22, [%rd21];
	setp.ge.s64	%p1, %rd20, %rd22;
	@%p1 bra 	BB30_4;

	ld.global.u32 	%r4, [%rd1];
	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB30_4;

	cvta.to.global.u64 	%rd24, %rd14;
	cvta.to.global.u64 	%rd35, %rd15;
	cvta.to.global.u64 	%rd25, %rd13;
	cvt.s64.s32	%rd29, %r4;
	mul.lo.s64 	%rd30, %rd20, %rd29;
	shl.b64 	%rd31, %rd30, 3;
	add.s64 	%rd34, %rd24, %rd31;
	add.s64 	%rd33, %rd25, %rd31;
	mov.u64 	%rd36, 0;

BB30_3:
	ld.global.f64 	%fd1, [%rd35];
	ld.global.f64 	%fd2, [%rd33];
	add.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%rd34], %fd3;
	ld.global.s32 	%rd32, [%rd1];
	add.s64 	%rd35, %rd35, 8;
	add.s64 	%rd34, %rd34, 8;
	add.s64 	%rd33, %rd33, 8;
	add.s64 	%rd36, %rd36, 1;
	setp.lt.s64	%p3, %rd36, %rd32;
	@%p3 bra 	BB30_3;

BB30_4:
	ret;
}

	// .globl	DataPointReduce
.visible .entry DataPointReduce(
	.param .u64 DataPointReduce_param_0,
	.param .u64 DataPointReduce_param_1,
	.param .u64 DataPointReduce_param_2,
	.param .u64 DataPointReduce_param_3,
	.param .u64 DataPointReduce_param_4,
	.param .u64 DataPointReduce_param_5
)
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<32>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<91>;


	ld.param.u64 	%rd35, [DataPointReduce_param_0];
	ld.param.u64 	%rd36, [DataPointReduce_param_1];
	ld.param.u64 	%rd37, [DataPointReduce_param_2];
	ld.param.u64 	%rd38, [DataPointReduce_param_3];
	ld.param.u64 	%rd39, [DataPointReduce_param_4];
	cvta.to.global.u64 	%rd1, %rd37;
	cvta.to.global.u64 	%rd2, %rd36;
	cvta.to.global.u64 	%rd3, %rd38;
	cvta.to.global.u64 	%rd4, %rd35;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd40, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd41, %r3, %r2;
	add.s64 	%rd5, %rd41, %rd40;
	cvta.to.global.u64 	%rd42, %rd39;
	ld.global.u32 	%r20, [%rd42];
	setp.eq.s32	%p1, %r20, 0;
	@%p1 bra 	BB31_10;

	setp.ne.s64	%p2, %rd5, 0;
	@%p2 bra 	BB31_20;

	ld.global.s32 	%rd43, [%rd4];
	setp.lt.s64	%p3, %rd43, 16384;
	selp.b64	%rd6, %rd43, 16384, %p3;
	setp.lt.s64	%p4, %rd6, 1;
	@%p4 bra 	BB31_20;

	ld.global.u32 	%r29, [%rd3];
	mov.u64 	%rd44, 0;
	mov.u64 	%rd80, %rd44;

BB31_4:
	mov.u32 	%r25, %r29;
	mov.u32 	%r5, %r25;
	setp.gt.s32	%p5, %r5, 0;
	setp.eq.s64	%p6, %rd80, 0;
	and.pred  	%p7, %p6, %p5;
	mov.u64 	%rd79, %rd44;
	mov.u32 	%r27, %r5;
	mov.u64 	%rd84, %rd1;
	@!%p7 bra 	BB31_6;
	bra.uni 	BB31_5;

BB31_5:
	mov.u64 	%rd8, %rd84;
	mov.u64 	%rd9, %rd79;
	st.global.u64 	[%rd8], %rd44;
	ld.global.u32 	%r6, [%rd3];
	cvt.s64.s32	%rd47, %r6;
	add.s64 	%rd10, %rd8, 8;
	add.s64 	%rd11, %rd9, 1;
	setp.lt.s64	%p8, %rd11, %rd47;
	mov.u64 	%rd79, %rd11;
	mov.u32 	%r27, %r6;
	mov.u64 	%rd84, %rd10;
	@%p8 bra 	BB31_5;

BB31_6:
	mov.u32 	%r24, %r27;
	mov.u32 	%r28, %r24;
	setp.lt.s32	%p9, %r28, 1;
	@%p9 bra 	BB31_9;

	cvt.s64.s32	%rd49, %r5;
	mul.lo.s64 	%rd50, %rd80, %rd49;
	shl.b64 	%rd51, %rd50, 3;
	add.s64 	%rd81, %rd2, %rd51;
	mov.u64 	%rd85, 0;
	mov.u64 	%rd83, %rd1;

BB31_8:
	ld.global.f64 	%fd1, [%rd83];
	ld.global.f64 	%fd2, [%rd81];
	add.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%rd83], %fd3;
	ld.global.u32 	%r28, [%rd3];
	cvt.s64.s32	%rd52, %r28;
	add.s64 	%rd83, %rd83, 8;
	add.s64 	%rd81, %rd81, 8;
	add.s64 	%rd85, %rd85, 1;
	setp.lt.s64	%p10, %rd85, %rd52;
	@%p10 bra 	BB31_8;

BB31_9:
	mov.u32 	%r29, %r28;
	add.s64 	%rd80, %rd80, 1;
	setp.lt.s64	%p11, %rd80, %rd6;
	@%p11 bra 	BB31_4;
	bra.uni 	BB31_20;

BB31_10:
	ld.global.u32 	%r30, [%rd4];
	cvt.s64.s32	%rd53, %r30;
	setp.ge.s64	%p12, %rd5, %rd53;
	@%p12 bra 	BB31_20;

	mov.u32 	%r21, %nctaid.x;
	mul.lo.s32 	%r22, %r21, %r3;
	setp.eq.s32	%p13, %r22, 16384;
	@%p13 bra 	BB31_13;

	mov.u64 	%rd54, $str;
	cvta.global.u64 	%rd55, %rd54;
	mov.u64 	%rd56, $str1;
	cvta.global.u64 	%rd57, %rd56;
	mov.u64 	%rd58, __T23;
	cvta.global.u64 	%rd59, %rd58;
	mov.u32 	%r23, 247;
	mov.u64 	%rd60, 1;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd55;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd57;
	.param .b32 param2;
	st.param.b32	[param2+0], %r23;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd59;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd60;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3
	ld.global.u32 	%r30, [%rd4];

BB31_13:
	ld.global.u32 	%r31, [%rd3];
	cvt.s64.s32	%rd61, %r30;
	add.s64 	%rd87, %rd5, 16384;
	setp.ge.s64	%p14, %rd87, %rd61;
	@%p14 bra 	BB31_20;

	add.s64 	%rd22, %rd5, 16384;
	cvt.s64.s32	%rd65, %r31;
	mul.lo.s64 	%rd66, %rd5, %rd65;
	shl.b64 	%rd67, %rd66, 3;
	add.s64 	%rd23, %rd2, %rd67;
	mov.u64 	%rd86, 0;

BB31_15:
	setp.lt.s32	%p15, %r31, 1;
	@%p15 bra 	BB31_19;

	shl.b64 	%rd69, %rd86, 14;
	add.s64 	%rd70, %rd22, %rd69;
	shl.b64 	%rd71, %rd70, 3;
	add.s64 	%rd72, %rd2, %rd71;
	cvt.s64.s32	%rd73, %r31;
	mul.lo.s64 	%rd74, %rd5, %rd73;
	shl.b64 	%rd75, %rd74, 3;
	add.s64 	%rd89, %rd72, %rd75;
	mov.u64 	%rd90, 0;
	mov.u64 	%rd88, %rd23;

BB31_17:
	mov.u64 	%rd27, %rd88;
	ld.global.f64 	%fd4, [%rd27];
	ld.global.f64 	%fd5, [%rd89];
	add.f64 	%fd6, %fd5, %fd4;
	st.global.f64 	[%rd27], %fd6;
	ld.global.u32 	%r31, [%rd3];
	cvt.s64.s32	%rd76, %r31;
	add.s64 	%rd89, %rd89, 8;
	add.s64 	%rd31, %rd27, 8;
	add.s64 	%rd90, %rd90, 1;
	setp.lt.s64	%p16, %rd90, %rd76;
	mov.u64 	%rd88, %rd31;
	@%p16 bra 	BB31_17;

	ld.global.u32 	%r30, [%rd4];

BB31_19:
	cvt.s64.s32	%rd77, %r30;
	add.s64 	%rd87, %rd87, 16384;
	setp.lt.s64	%p17, %rd87, %rd77;
	add.s64 	%rd86, %rd86, 1;
	@%p17 bra 	BB31_15;

BB31_20:
	ret;
}

	// .globl	blockReduce
.visible .entry blockReduce(
	.param .u64 blockReduce_param_0,
	.param .u64 blockReduce_param_1,
	.param .u64 blockReduce_param_2,
	.param .u64 blockReduce_param_3
)
{
	.reg .pred 	%p<17>;
	.reg .b32 	%r<372>;
	.reg .f64 	%fd<105>;
	.reg .b64 	%rd<70>;


	ld.param.u64 	%rd36, [blockReduce_param_0];
	ld.param.u64 	%rd37, [blockReduce_param_1];
	ld.param.u64 	%rd38, [blockReduce_param_2];
	ld.param.u64 	%rd35, [blockReduce_param_3];
	cvta.to.global.u64 	%rd1, %rd38;
	cvta.to.global.u64 	%rd2, %rd37;
	mov.u32 	%r17, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r17, %r1, %r2;
	cvta.to.global.u64 	%rd39, %rd36;
	ld.global.u32 	%r4, [%rd39];
	setp.ge.s32	%p1, %r3, %r4;
	@%p1 bra 	BB32_24;

	cvta.to.global.u64 	%rd41, %rd35;
	ld.global.s32 	%rd3, [%rd41];
	cvt.s64.s32	%rd4, %r4;
	mov.u64 	%rd67, 0;
	setp.lt.s64	%p2, %rd3, 4;
	@%p2 bra 	BB32_16;

	cvt.u64.u32	%rd5, %r3;
	mov.u32 	%r18, %nctaid.x;
	mul.lo.s32 	%r19, %r18, %r1;
	cvt.u64.u32	%rd6, %r19;
	and.b32  	%r5, %r2, 31;
	add.s32 	%r20, %r3, 16;
	shr.s32 	%r21, %r20, 31;
	shr.u32 	%r22, %r21, 27;
	add.s32 	%r23, %r20, %r22;
	and.b32  	%r24, %r23, -32;
	sub.s32 	%r6, %r20, %r24;
	add.s32 	%r25, %r3, 8;
	shr.s32 	%r26, %r25, 31;
	shr.u32 	%r27, %r26, 27;
	add.s32 	%r28, %r25, %r27;
	and.b32  	%r29, %r28, -32;
	sub.s32 	%r7, %r25, %r29;
	add.s32 	%r30, %r3, 4;
	shr.s32 	%r31, %r30, 31;
	shr.u32 	%r32, %r31, 27;
	add.s32 	%r33, %r30, %r32;
	and.b32  	%r34, %r33, -32;
	sub.s32 	%r8, %r30, %r34;
	add.s32 	%r35, %r3, 2;
	shr.s32 	%r36, %r35, 31;
	shr.u32 	%r37, %r36, 27;
	add.s32 	%r38, %r35, %r37;
	and.b32  	%r39, %r38, -32;
	sub.s32 	%r9, %r35, %r39;
	add.s32 	%r40, %r3, 1;
	shr.s32 	%r41, %r40, 31;
	shr.u32 	%r42, %r41, 27;
	add.s32 	%r43, %r40, %r42;
	and.b32  	%r44, %r43, -32;
	sub.s32 	%r10, %r40, %r44;
	mov.u64 	%rd67, 0;

BB32_3:
	mov.f64 	%fd101, 0d0000000000000000;
	mov.f64 	%fd100, %fd101;
	mov.f64 	%fd99, %fd101;
	mov.f64 	%fd98, %fd101;
	setp.ge.s64	%p3, %rd5, %rd4;
	@%p3 bra 	BB32_6;

	mov.f64 	%fd98, 0d0000000000000000;
	mov.f64 	%fd99, %fd98;
	mov.f64 	%fd100, %fd98;
	mov.f64 	%fd101, %fd98;
	mov.u64 	%rd62, %rd5;

BB32_5:
	mov.u64 	%rd8, %rd62;
	mul.lo.s64 	%rd43, %rd8, %rd3;
	add.s64 	%rd44, %rd43, %rd67;
	shl.b64 	%rd45, %rd44, 3;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.f64 	%fd31, [%rd46];
	add.f64 	%fd101, %fd101, %fd31;
	ld.global.f64 	%fd32, [%rd46+8];
	add.f64 	%fd100, %fd100, %fd32;
	ld.global.f64 	%fd33, [%rd46+16];
	add.f64 	%fd99, %fd99, %fd33;
	ld.global.f64 	%fd34, [%rd46+24];
	add.f64 	%fd98, %fd98, %fd34;
	add.s64 	%rd9, %rd6, %rd8;
	setp.lt.s64	%p4, %rd9, %rd4;
	mov.u64 	%rd62, %rd9;
	@%p4 bra 	BB32_5;

BB32_6:
	// inline asm
	mov.b64 {%r45,%r46}, %fd101;
	// inline asm
	// inline asm
	mov.b64 {%r47,%r48}, %fd100;
	// inline asm
	// inline asm
	mov.b64 {%r49,%r50}, %fd99;
	// inline asm
	// inline asm
	mov.b64 {%r51,%r52}, %fd98;
	// inline asm
	mov.u32 	%r276, 31;
	// inline asm
	shfl.idx.b32 %r53, %r45, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r57, %r46, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r61, %r47, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r65, %r48, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r69, %r49, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r73, %r50, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r77, %r51, %r6, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r81, %r52, %r6, %r276;
	// inline asm
	// inline asm
	mov.b64 %fd39, {%r53,%r57};
	// inline asm
	// inline asm
	mov.b64 %fd40, {%r61,%r65};
	// inline asm
	// inline asm
	mov.b64 %fd41, {%r69,%r73};
	// inline asm
	// inline asm
	mov.b64 %fd42, {%r77,%r81};
	// inline asm
	add.f64 	%fd43, %fd101, %fd39;
	add.f64 	%fd44, %fd100, %fd40;
	add.f64 	%fd45, %fd99, %fd41;
	add.f64 	%fd46, %fd98, %fd42;
	// inline asm
	mov.b64 {%r93,%r94}, %fd43;
	// inline asm
	// inline asm
	mov.b64 {%r95,%r96}, %fd44;
	// inline asm
	// inline asm
	mov.b64 {%r97,%r98}, %fd45;
	// inline asm
	// inline asm
	mov.b64 {%r99,%r100}, %fd46;
	// inline asm
	// inline asm
	shfl.idx.b32 %r101, %r93, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r105, %r94, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r109, %r95, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r113, %r96, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r117, %r97, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r121, %r98, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r125, %r99, %r7, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r129, %r100, %r7, %r276;
	// inline asm
	// inline asm
	mov.b64 %fd47, {%r101,%r105};
	// inline asm
	// inline asm
	mov.b64 %fd48, {%r109,%r113};
	// inline asm
	// inline asm
	mov.b64 %fd49, {%r117,%r121};
	// inline asm
	// inline asm
	mov.b64 %fd50, {%r125,%r129};
	// inline asm
	add.f64 	%fd51, %fd43, %fd47;
	add.f64 	%fd52, %fd44, %fd48;
	add.f64 	%fd53, %fd45, %fd49;
	add.f64 	%fd54, %fd46, %fd50;
	// inline asm
	mov.b64 {%r141,%r142}, %fd51;
	// inline asm
	// inline asm
	mov.b64 {%r143,%r144}, %fd52;
	// inline asm
	// inline asm
	mov.b64 {%r145,%r146}, %fd53;
	// inline asm
	// inline asm
	mov.b64 {%r147,%r148}, %fd54;
	// inline asm
	// inline asm
	shfl.idx.b32 %r149, %r141, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r153, %r142, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r157, %r143, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r161, %r144, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r165, %r145, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r169, %r146, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r173, %r147, %r8, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r177, %r148, %r8, %r276;
	// inline asm
	// inline asm
	mov.b64 %fd55, {%r149,%r153};
	// inline asm
	// inline asm
	mov.b64 %fd56, {%r157,%r161};
	// inline asm
	// inline asm
	mov.b64 %fd57, {%r165,%r169};
	// inline asm
	// inline asm
	mov.b64 %fd58, {%r173,%r177};
	// inline asm
	add.f64 	%fd59, %fd51, %fd55;
	add.f64 	%fd60, %fd52, %fd56;
	add.f64 	%fd61, %fd53, %fd57;
	add.f64 	%fd62, %fd54, %fd58;
	// inline asm
	mov.b64 {%r189,%r190}, %fd59;
	// inline asm
	// inline asm
	mov.b64 {%r191,%r192}, %fd60;
	// inline asm
	// inline asm
	mov.b64 {%r193,%r194}, %fd61;
	// inline asm
	// inline asm
	mov.b64 {%r195,%r196}, %fd62;
	// inline asm
	// inline asm
	shfl.idx.b32 %r197, %r189, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r201, %r190, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r205, %r191, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r209, %r192, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r213, %r193, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r217, %r194, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r221, %r195, %r9, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r225, %r196, %r9, %r276;
	// inline asm
	// inline asm
	mov.b64 %fd63, {%r197,%r201};
	// inline asm
	// inline asm
	mov.b64 %fd64, {%r205,%r209};
	// inline asm
	// inline asm
	mov.b64 %fd65, {%r213,%r217};
	// inline asm
	// inline asm
	mov.b64 %fd66, {%r221,%r225};
	// inline asm
	add.f64 	%fd67, %fd59, %fd63;
	add.f64 	%fd68, %fd60, %fd64;
	add.f64 	%fd69, %fd61, %fd65;
	add.f64 	%fd70, %fd62, %fd66;
	// inline asm
	mov.b64 {%r237,%r238}, %fd67;
	// inline asm
	// inline asm
	mov.b64 {%r239,%r240}, %fd68;
	// inline asm
	// inline asm
	mov.b64 {%r241,%r242}, %fd69;
	// inline asm
	// inline asm
	mov.b64 {%r243,%r244}, %fd70;
	// inline asm
	// inline asm
	shfl.idx.b32 %r245, %r237, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r249, %r238, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r253, %r239, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r257, %r240, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r261, %r241, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r265, %r242, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r269, %r243, %r10, %r276;
	// inline asm
	// inline asm
	shfl.idx.b32 %r273, %r244, %r10, %r276;
	// inline asm
	// inline asm
	mov.b64 %fd71, {%r245,%r249};
	// inline asm
	// inline asm
	mov.b64 %fd72, {%r253,%r257};
	// inline asm
	// inline asm
	mov.b64 %fd73, {%r261,%r265};
	// inline asm
	// inline asm
	mov.b64 %fd74, {%r269,%r273};
	// inline asm
	add.f64 	%fd13, %fd67, %fd71;
	add.f64 	%fd14, %fd68, %fd72;
	add.f64 	%fd15, %fd69, %fd73;
	add.f64 	%fd16, %fd70, %fd74;
	setp.ne.s32	%p5, %r5, 0;
	@%p5 bra 	BB32_15;

	shl.b64 	%rd47, %rd67, 3;
	add.s64 	%rd10, %rd1, %rd47;
	ld.global.u64 	%rd63, [%rd10];

BB32_8:
	mov.u64 	%rd12, %rd63;
	mov.b64 	 %fd75, %rd12;
	add.f64 	%fd76, %fd13, %fd75;
	mov.b64 	 %rd48, %fd76;
	atom.global.cas.b64 	%rd63, [%rd10], %rd12, %rd48;
	setp.ne.s64	%p6, %rd12, %rd63;
	@%p6 bra 	BB32_8;

	ld.global.u64 	%rd64, [%rd10+8];

BB32_10:
	mov.u64 	%rd15, %rd64;
	add.s64 	%rd49, %rd10, 8;
	mov.b64 	 %fd77, %rd15;
	add.f64 	%fd78, %fd14, %fd77;
	mov.b64 	 %rd50, %fd78;
	atom.global.cas.b64 	%rd64, [%rd49], %rd15, %rd50;
	setp.ne.s64	%p7, %rd15, %rd64;
	@%p7 bra 	BB32_10;

	ld.global.u64 	%rd65, [%rd10+16];

BB32_12:
	mov.u64 	%rd18, %rd65;
	add.s64 	%rd51, %rd10, 16;
	mov.b64 	 %fd79, %rd18;
	add.f64 	%fd80, %fd15, %fd79;
	mov.b64 	 %rd52, %fd80;
	atom.global.cas.b64 	%rd65, [%rd51], %rd18, %rd52;
	setp.ne.s64	%p8, %rd18, %rd65;
	@%p8 bra 	BB32_12;

	ld.global.u64 	%rd66, [%rd10+24];

BB32_14:
	mov.u64 	%rd21, %rd66;
	add.s64 	%rd53, %rd10, 24;
	mov.b64 	 %fd81, %rd21;
	add.f64 	%fd82, %fd16, %fd81;
	mov.b64 	 %rd54, %fd82;
	atom.global.cas.b64 	%rd66, [%rd53], %rd21, %rd54;
	setp.ne.s64	%p9, %rd21, %rd66;
	@%p9 bra 	BB32_14;

BB32_15:
	add.s64 	%rd67, %rd67, 4;
	sub.s64 	%rd55, %rd3, %rd67;
	setp.gt.s64	%p10, %rd55, 3;
	@%p10 bra 	BB32_3;

BB32_16:
	setp.ge.s64	%p11, %rd67, %rd3;
	@%p11 bra 	BB32_24;

	cvt.u64.u32	%rd25, %r3;
	mov.u32 	%r285, %nctaid.x;
	mul.lo.s32 	%r286, %r285, %r1;
	cvt.u64.u32	%rd26, %r286;
	and.b32  	%r11, %r2, 31;
	add.s32 	%r287, %r3, 16;
	shr.s32 	%r288, %r287, 31;
	shr.u32 	%r289, %r288, 27;
	add.s32 	%r290, %r287, %r289;
	and.b32  	%r291, %r290, -32;
	sub.s32 	%r12, %r287, %r291;
	add.s32 	%r292, %r3, 8;
	shr.s32 	%r293, %r292, 31;
	shr.u32 	%r294, %r293, 27;
	add.s32 	%r295, %r292, %r294;
	and.b32  	%r296, %r295, -32;
	sub.s32 	%r13, %r292, %r296;
	add.s32 	%r297, %r3, 4;
	shr.s32 	%r298, %r297, 31;
	shr.u32 	%r299, %r298, 27;
	add.s32 	%r300, %r297, %r299;
	and.b32  	%r301, %r300, -32;
	sub.s32 	%r14, %r297, %r301;
	add.s32 	%r302, %r3, 2;
	shr.s32 	%r303, %r302, 31;
	shr.u32 	%r304, %r303, 27;
	add.s32 	%r305, %r302, %r304;
	and.b32  	%r306, %r305, -32;
	sub.s32 	%r15, %r302, %r306;
	add.s32 	%r307, %r3, 1;
	shr.s32 	%r308, %r307, 31;
	shr.u32 	%r309, %r308, 27;
	add.s32 	%r310, %r307, %r309;
	and.b32  	%r311, %r310, -32;
	sub.s32 	%r16, %r307, %r311;

BB32_18:
	mov.f64 	%fd103, 0d0000000000000000;
	mov.f64 	%fd104, %fd103;
	setp.ge.s64	%p12, %rd25, %rd4;
	mov.u64 	%rd68, %rd25;
	@%p12 bra 	BB32_20;

BB32_19:
	mov.u64 	%rd28, %rd68;
	mul.lo.s64 	%rd56, %rd28, %rd3;
	add.s64 	%rd57, %rd56, %rd67;
	shl.b64 	%rd58, %rd57, 3;
	add.s64 	%rd59, %rd2, %rd58;
	ld.global.f64 	%fd85, [%rd59];
	add.f64 	%fd104, %fd104, %fd85;
	add.s64 	%rd29, %rd26, %rd28;
	setp.lt.s64	%p13, %rd29, %rd4;
	mov.u64 	%rd68, %rd29;
	mov.f64 	%fd103, %fd104;
	@%p13 bra 	BB32_19;

BB32_20:
	// inline asm
	mov.b64 {%r312,%r313}, %fd103;
	// inline asm
	mov.u32 	%r369, 31;
	// inline asm
	shfl.idx.b32 %r314, %r312, %r12, %r369;
	// inline asm
	// inline asm
	shfl.idx.b32 %r318, %r313, %r12, %r369;
	// inline asm
	// inline asm
	mov.b64 %fd87, {%r314,%r318};
	// inline asm
	add.f64 	%fd88, %fd103, %fd87;
	// inline asm
	mov.b64 {%r324,%r325}, %fd88;
	// inline asm
	// inline asm
	shfl.idx.b32 %r326, %r324, %r13, %r369;
	// inline asm
	// inline asm
	shfl.idx.b32 %r330, %r325, %r13, %r369;
	// inline asm
	// inline asm
	mov.b64 %fd89, {%r326,%r330};
	// inline asm
	add.f64 	%fd90, %fd88, %fd89;
	// inline asm
	mov.b64 {%r336,%r337}, %fd90;
	// inline asm
	// inline asm
	shfl.idx.b32 %r338, %r336, %r14, %r369;
	// inline asm
	// inline asm
	shfl.idx.b32 %r342, %r337, %r14, %r369;
	// inline asm
	// inline asm
	mov.b64 %fd91, {%r338,%r342};
	// inline asm
	add.f64 	%fd92, %fd90, %fd91;
	// inline asm
	mov.b64 {%r348,%r349}, %fd92;
	// inline asm
	// inline asm
	shfl.idx.b32 %r350, %r348, %r15, %r369;
	// inline asm
	// inline asm
	shfl.idx.b32 %r354, %r349, %r15, %r369;
	// inline asm
	// inline asm
	mov.b64 %fd93, {%r350,%r354};
	// inline asm
	add.f64 	%fd94, %fd92, %fd93;
	// inline asm
	mov.b64 {%r360,%r361}, %fd94;
	// inline asm
	// inline asm
	shfl.idx.b32 %r362, %r360, %r16, %r369;
	// inline asm
	// inline asm
	shfl.idx.b32 %r366, %r361, %r16, %r369;
	// inline asm
	// inline asm
	mov.b64 %fd95, {%r362,%r366};
	// inline asm
	setp.ne.s32	%p14, %r11, 0;
	@%p14 bra 	BB32_23;

	shl.b64 	%rd60, %rd67, 3;
	add.s64 	%rd30, %rd1, %rd60;
	add.f64 	%fd22, %fd94, %fd95;
	ld.global.u64 	%rd69, [%rd30];

BB32_22:
	mov.u64 	%rd32, %rd69;
	mov.b64 	 %fd96, %rd32;
	add.f64 	%fd97, %fd22, %fd96;
	mov.b64 	 %rd61, %fd97;
	atom.global.cas.b64 	%rd69, [%rd30], %rd32, %rd61;
	setp.ne.s64	%p15, %rd32, %rd69;
	@%p15 bra 	BB32_22;

BB32_23:
	add.s64 	%rd67, %rd67, 1;
	setp.lt.s64	%p16, %rd67, %rd3;
	@%p16 bra 	BB32_18;

BB32_24:
	ret;
}

	// .globl	mapAll
.visible .entry mapAll(
	.param .u64 mapAll_param_0,
	.param .u64 mapAll_param_1,
	.param .u64 mapAll_param_2,
	.param .u64 mapAll_param_3,
	.param .u64 mapAll_param_4,
	.param .u64 mapAll_param_5
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<34>;
	.reg .f64 	%fd<59>;
	.reg .b64 	%rd<32>;


	ld.param.u64 	%rd18, [mapAll_param_0];
	ld.param.u64 	%rd19, [mapAll_param_1];
	ld.param.u64 	%rd14, [mapAll_param_2];
	ld.param.u64 	%rd15, [mapAll_param_3];
	ld.param.u64 	%rd16, [mapAll_param_4];
	ld.param.u64 	%rd17, [mapAll_param_5];
	cvta.to.global.u64 	%rd1, %rd19;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	cvta.to.global.u64 	%rd20, %rd18;
	ld.global.u32 	%r13, [%rd20];
	setp.ge.s32	%p1, %r4, %r13;
	@%p1 bra 	BB33_10;

	cvta.to.global.u64 	%rd21, %rd17;
	cvta.to.global.u64 	%rd22, %rd14;
	mul.wide.s32 	%rd23, %r4, 8;
	add.s64 	%rd24, %rd22, %rd23;
	ld.global.f64 	%fd1, [%rd24];
	ld.global.u32 	%r5, [%rd21];
	mov.f64 	%fd57, 0d0000000000000000;
	setp.lt.s32	%p2, %r5, 1;
	@%p2 bra 	BB33_4;

	cvta.to.global.u64 	%rd28, %rd16;
	mul.lo.s32 	%r16, %r5, %r4;
	mul.wide.s32 	%rd25, %r16, 8;
	add.s64 	%rd29, %rd1, %rd25;
	mov.f64 	%fd57, 0d0000000000000000;
	mov.u32 	%r32, 0;

BB33_3:
	ld.global.f64 	%fd13, [%rd29];
	ld.global.f64 	%fd14, [%rd28];
	fma.rn.f64 	%fd57, %fd14, %fd13, %fd57;
	add.s64 	%rd29, %rd29, 8;
	add.s64 	%rd28, %rd28, 8;
	add.s32 	%r32, %r32, 1;
	setp.lt.s32	%p3, %r32, %r5;
	@%p3 bra 	BB33_3;

BB33_4:
	mul.f64 	%fd5, %fd1, %fd57;
	neg.f64 	%fd15, %fd5;
	mov.f64 	%fd16, 0d3FF71547652B82FE;
	mul.rn.f64 	%fd17, %fd15, %fd16;
	mov.f64 	%fd18, 0d4338000000000000;
	add.rn.f64 	%fd19, %fd17, %fd18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r8, %temp}, %fd19;
	}
	mov.f64 	%fd20, 0dC338000000000000;
	add.rn.f64 	%fd21, %fd19, %fd20;
	mov.f64 	%fd22, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd23, %fd21, %fd22, %fd15;
	mov.f64 	%fd24, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd25, %fd21, %fd24, %fd23;
	mov.f64 	%fd26, 0d3E928AF3FCA213EA;
	mov.f64 	%fd27, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd28, %fd27, %fd25, %fd26;
	mov.f64 	%fd29, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd30, %fd28, %fd25, %fd29;
	mov.f64 	%fd31, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd32, %fd30, %fd25, %fd31;
	mov.f64 	%fd33, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd34, %fd32, %fd25, %fd33;
	mov.f64 	%fd35, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd36, %fd34, %fd25, %fd35;
	mov.f64 	%fd37, 0d3F81111111122322;
	fma.rn.f64 	%fd38, %fd36, %fd25, %fd37;
	mov.f64 	%fd39, 0d3FA55555555502A1;
	fma.rn.f64 	%fd40, %fd38, %fd25, %fd39;
	mov.f64 	%fd41, 0d3FC5555555555511;
	fma.rn.f64 	%fd42, %fd40, %fd25, %fd41;
	mov.f64 	%fd43, 0d3FE000000000000B;
	fma.rn.f64 	%fd44, %fd42, %fd25, %fd43;
	mov.f64 	%fd45, 0d3FF0000000000000;
	fma.rn.f64 	%fd46, %fd44, %fd25, %fd45;
	fma.rn.f64 	%fd47, %fd46, %fd25, %fd45;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r9, %temp}, %fd47;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd47;
	}
	shl.b32 	%r17, %r8, 20;
	add.s32 	%r18, %r10, %r17;
	mov.b64 	%fd58, {%r9, %r18};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r19}, %fd15;
	}
	mov.b32 	 %f2, %r19;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB33_7;

	setp.gt.f64	%p5, %fd5, 0d8000000000000000;
	mov.f64 	%fd48, 0d7FF0000000000000;
	sub.f64 	%fd49, %fd48, %fd5;
	selp.f64	%fd58, 0d0000000000000000, %fd49, %p5;
	setp.geu.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB33_7;

	shr.u32 	%r20, %r8, 31;
	add.s32 	%r21, %r8, %r20;
	shr.s32 	%r22, %r21, 1;
	shl.b32 	%r23, %r22, 20;
	add.s32 	%r24, %r23, %r10;
	mov.b64 	%fd50, {%r9, %r24};
	sub.s32 	%r25, %r8, %r22;
	shl.b32 	%r26, %r25, 20;
	add.s32 	%r27, %r26, 1072693248;
	mov.u32 	%r28, 0;
	mov.b64 	%fd51, {%r28, %r27};
	mul.f64 	%fd58, %fd50, %fd51;

BB33_7:
	@%p2 bra 	BB33_10;

	cvta.to.global.u64 	%rd26, %rd15;
	add.f64 	%fd52, %fd58, 0d3FF0000000000000;
	rcp.rn.f64 	%fd53, %fd52;
	add.f64 	%fd54, %fd53, 0dBFF0000000000000;
	mul.f64 	%fd10, %fd1, %fd54;
	mul.lo.s32 	%r31, %r5, %r4;
	mul.wide.s32 	%rd27, %r31, 8;
	add.s64 	%rd31, %rd26, %rd27;
	add.s64 	%rd30, %rd1, %rd27;
	mov.u32 	%r33, 0;

BB33_9:
	ld.global.f64 	%fd55, [%rd30];
	mul.f64 	%fd56, %fd10, %fd55;
	st.global.f64 	[%rd31], %fd56;
	add.s64 	%rd31, %rd31, 8;
	add.s64 	%rd30, %rd30, 8;
	add.s32 	%r33, %r33, 1;
	setp.lt.s32	%p8, %r33, %r5;
	@%p8 bra 	BB33_9;

BB33_10:
	ret;
}


