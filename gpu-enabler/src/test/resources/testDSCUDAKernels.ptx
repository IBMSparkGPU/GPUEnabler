//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-21313570
// Cuda compilation tools, release 8.0, V8.0.53
// Based on LLVM 3.4svn
//

.version 5.0
.target sm_35
.address_size 64

	// .globl	identity
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
;
.global .align 1 .b8 __T20[38] = {118, 111, 105, 100, 32, 115, 117, 109, 40, 105, 110, 116, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 0};
.global .align 1 .b8 __T21[41] = {118, 111, 105, 100, 32, 115, 117, 109, 108, 40, 105, 110, 116, 44, 32, 108, 111, 110, 103, 32, 42, 44, 32, 108, 111, 110, 103, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 0};
.global .align 1 .b8 __T22[57] = {118, 111, 105, 100, 32, 105, 110, 116, 65, 114, 114, 97, 121, 83, 117, 109, 40, 105, 110, 116, 44, 32, 99, 111, 110, 115, 116, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 0};
.global .align 1 .b8 __T23[67] = {118, 111, 105, 100, 32, 68, 97, 116, 97, 80, 111, 105, 110, 116, 82, 101, 100, 117, 99, 101, 40, 105, 110, 116, 44, 32, 99, 111, 110, 115, 116, 32, 100, 111, 117, 98, 108, 101, 32, 42, 44, 32, 100, 111, 117, 98, 108, 101, 32, 42, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 44, 32, 105, 110, 116, 41, 0};
.global .align 1 .b8 $str[31] = {106, 117, 109, 112, 32, 61, 61, 32, 98, 108, 111, 99, 107, 68, 105, 109, 46, 120, 32, 42, 32, 103, 114, 105, 100, 68, 105, 109, 46, 120, 0};
.global .align 1 .b8 $str1[21] = {116, 101, 115, 116, 68, 83, 67, 85, 68, 65, 75, 101, 114, 110, 101, 108, 115, 46, 99, 117, 0};

.visible .entry identity(
	.param .u32 identity_param_0,
	.param .u64 identity_param_1,
	.param .u64 identity_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [identity_param_1];
	ld.param.u64 	%rd3, [identity_param_2];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd4, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd5, %r3, %r2;
	add.s64 	%rd1, %rd5, %rd4;
	ld.param.s32 	%rd6, [identity_param_0];
	setp.ge.s64	%p1, %rd1, %rd6;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd7, %rd2;
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.u64 	%rd10, [%rd9];
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd8;
	st.global.u64 	[%rd12], %rd10;

BB0_2:
	ret;
}

	// .globl	intArrayIdentity
.visible .entry intArrayIdentity(
	.param .u32 intArrayIdentity_param_0,
	.param .u64 intArrayIdentity_param_1,
	.param .u64 intArrayIdentity_param_2,
	.param .u32 intArrayIdentity_param_3
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<19>;


	ld.param.u32 	%r5, [intArrayIdentity_param_0];
	ld.param.u64 	%rd10, [intArrayIdentity_param_1];
	ld.param.u64 	%rd11, [intArrayIdentity_param_2];
	ld.param.u32 	%r4, [intArrayIdentity_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r6, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r6, %r5;
	@%p1 bra 	BB1_4;

	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB1_4;

	cvta.to.global.u64 	%rd13, %rd11;
	cvta.to.global.u64 	%rd14, %rd10;
	cvt.s64.s32	%rd1, %r4;
	mul.lo.s32 	%r8, %r4, %r6;
	mul.wide.s32 	%rd15, %r8, 4;
	add.s64 	%rd17, %rd13, %rd15;
	add.s64 	%rd16, %rd14, %rd15;
	mov.u64 	%rd18, 0;

BB1_3:
	ld.global.u32 	%r9, [%rd16];
	st.global.u32 	[%rd17], %r9;
	add.s64 	%rd17, %rd17, 4;
	add.s64 	%rd16, %rd16, 4;
	add.s64 	%rd18, %rd18, 1;
	setp.lt.s64	%p3, %rd18, %rd1;
	@%p3 bra 	BB1_3;

BB1_4:
	ret;
}

	// .globl	IntDataPointIdentity
.visible .entry IntDataPointIdentity(
	.param .u32 IntDataPointIdentity_param_0,
	.param .u64 IntDataPointIdentity_param_1,
	.param .u64 IntDataPointIdentity_param_2,
	.param .u64 IntDataPointIdentity_param_3,
	.param .u64 IntDataPointIdentity_param_4,
	.param .u32 IntDataPointIdentity_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<34>;


	ld.param.u64 	%rd11, [IntDataPointIdentity_param_1];
	ld.param.u64 	%rd12, [IntDataPointIdentity_param_2];
	ld.param.u64 	%rd13, [IntDataPointIdentity_param_3];
	ld.param.u64 	%rd14, [IntDataPointIdentity_param_4];
	ld.param.u32 	%r4, [IntDataPointIdentity_param_5];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd15, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd16, %r3, %r2;
	add.s64 	%rd1, %rd16, %rd15;
	ld.param.s32 	%rd17, [IntDataPointIdentity_param_0];
	setp.ge.s64	%p1, %rd1, %rd17;
	@%p1 bra 	BB2_5;

	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB2_4;

	cvta.to.global.u64 	%rd19, %rd13;
	cvta.to.global.u64 	%rd20, %rd11;
	cvt.s64.s32	%rd2, %r4;
	mul.lo.s64 	%rd24, %rd1, %rd2;
	shl.b64 	%rd25, %rd24, 2;
	add.s64 	%rd32, %rd19, %rd25;
	add.s64 	%rd31, %rd20, %rd25;
	mov.u64 	%rd33, 0;

BB2_3:
	ld.global.u32 	%r5, [%rd31];
	st.global.u32 	[%rd32], %r5;
	add.s64 	%rd32, %rd32, 4;
	add.s64 	%rd31, %rd31, 4;
	add.s64 	%rd33, %rd33, 1;
	setp.lt.s64	%p3, %rd33, %rd2;
	@%p3 bra 	BB2_3;

BB2_4:
	cvta.to.global.u64 	%rd26, %rd14;
	cvta.to.global.u64 	%rd27, %rd12;
	shl.b64 	%rd28, %rd1, 2;
	add.s64 	%rd29, %rd27, %rd28;
	ld.global.u32 	%r6, [%rd29];
	add.s64 	%rd30, %rd26, %rd28;
	st.global.u32 	[%rd30], %r6;

BB2_5:
	ret;
}

	// .globl	intArrayAdd
.visible .entry intArrayAdd(
	.param .u32 intArrayAdd_param_0,
	.param .u64 intArrayAdd_param_1,
	.param .u64 intArrayAdd_param_2,
	.param .u64 intArrayAdd_param_3,
	.param .u32 intArrayAdd_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<32>;


	ld.param.u64 	%rd13, [intArrayAdd_param_1];
	ld.param.u64 	%rd14, [intArrayAdd_param_2];
	ld.param.u64 	%rd15, [intArrayAdd_param_3];
	ld.param.u32 	%r4, [intArrayAdd_param_4];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd16, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd17, %r3, %r2;
	add.s64 	%rd18, %rd17, %rd16;
	ld.param.s32 	%rd19, [intArrayAdd_param_0];
	setp.ge.s64	%p1, %rd18, %rd19;
	@%p1 bra 	BB3_4;

	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB3_4;

	cvta.to.global.u64 	%rd21, %rd14;
	cvta.to.global.u64 	%rd30, %rd15;
	cvta.to.global.u64 	%rd22, %rd13;
	cvt.s64.s32	%rd2, %r4;
	mul.lo.s64 	%rd26, %rd18, %rd2;
	shl.b64 	%rd27, %rd26, 2;
	add.s64 	%rd29, %rd21, %rd27;
	add.s64 	%rd28, %rd22, %rd27;
	mov.u64 	%rd31, 0;

BB3_3:
	ld.global.u32 	%r5, [%rd30];
	ld.global.u32 	%r6, [%rd28];
	add.s32 	%r7, %r5, %r6;
	st.global.u32 	[%rd29], %r7;
	add.s64 	%rd30, %rd30, 4;
	add.s64 	%rd29, %rd29, 4;
	add.s64 	%rd28, %rd28, 4;
	add.s64 	%rd31, %rd31, 1;
	setp.lt.s64	%p3, %rd31, %rd2;
	@%p3 bra 	BB3_3;

BB3_4:
	ret;
}

	// .globl	vectorLength
.visible .entry vectorLength(
	.param .u32 vectorLength_param_0,
	.param .u64 vectorLength_param_1,
	.param .u64 vectorLength_param_2,
	.param .u64 vectorLength_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<15>;


	ld.param.u64 	%rd2, [vectorLength_param_1];
	ld.param.u64 	%rd3, [vectorLength_param_2];
	ld.param.u64 	%rd4, [vectorLength_param_3];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd5, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd6, %r3, %r2;
	add.s64 	%rd1, %rd6, %rd5;
	ld.param.s32 	%rd7, [vectorLength_param_0];
	setp.ge.s64	%p1, %rd1, %rd7;
	@%p1 bra 	BB4_2;

	cvta.to.global.u64 	%rd8, %rd2;
	shl.b64 	%rd9, %rd1, 3;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.f64 	%fd1, [%rd10];
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd9;
	ld.global.f64 	%fd2, [%rd12];
	mul.f64 	%fd3, %fd2, %fd2;
	fma.rn.f64 	%fd4, %fd1, %fd1, %fd3;
	sqrt.rn.f64 	%fd5, %fd4;
	cvta.to.global.u64 	%rd13, %rd4;
	add.s64 	%rd14, %rd13, %rd9;
	st.global.f64 	[%rd14], %fd5;

BB4_2:
	ret;
}

	// .globl	plusMinus
.visible .entry plusMinus(
	.param .u32 plusMinus_param_0,
	.param .u64 plusMinus_param_1,
	.param .u64 plusMinus_param_2,
	.param .u64 plusMinus_param_3,
	.param .u64 plusMinus_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<4>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd2, [plusMinus_param_1];
	ld.param.u64 	%rd3, [plusMinus_param_2];
	ld.param.u64 	%rd4, [plusMinus_param_3];
	ld.param.u64 	%rd5, [plusMinus_param_4];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd6, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd7, %r3, %r2;
	add.s64 	%rd1, %rd7, %rd6;
	ld.param.s32 	%rd8, [plusMinus_param_0];
	setp.ge.s64	%p1, %rd1, %rd8;
	@%p1 bra 	BB5_2;

	cvta.to.global.u64 	%rd9, %rd2;
	shl.b64 	%rd10, %rd1, 3;
	add.s64 	%rd11, %rd9, %rd10;
	cvta.to.global.u64 	%rd12, %rd3;
	shl.b64 	%rd13, %rd1, 2;
	add.s64 	%rd14, %rd12, %rd13;
	ld.global.f32 	%f1, [%rd14];
	cvt.f64.f32	%fd1, %f1;
	ld.global.f64 	%fd2, [%rd11];
	sub.f64 	%fd3, %fd2, %fd1;
	cvta.to.global.u64 	%rd15, %rd4;
	add.s64 	%rd16, %rd15, %rd10;
	st.global.f64 	[%rd16], %fd3;
	ld.global.f32 	%f2, [%rd14];
	cvt.f64.f32	%fd4, %f2;
	ld.global.f64 	%fd5, [%rd11];
	add.f64 	%fd6, %fd5, %fd4;
	cvt.rn.f32.f64	%f3, %fd6;
	cvta.to.global.u64 	%rd17, %rd5;
	add.s64 	%rd18, %rd17, %rd13;
	st.global.f32 	[%rd18], %f3;

BB5_2:
	ret;
}

	// .globl	applyLinearFunction
.visible .entry applyLinearFunction(
	.param .u32 applyLinearFunction_param_0,
	.param .u64 applyLinearFunction_param_1,
	.param .u64 applyLinearFunction_param_2,
	.param .u16 applyLinearFunction_param_3,
	.param .u16 applyLinearFunction_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<3>;
	.reg .b32 	%r<8>;
	.reg .b64 	%rd<12>;


	ld.param.u64 	%rd2, [applyLinearFunction_param_1];
	ld.param.u64 	%rd3, [applyLinearFunction_param_2];
	ld.param.u16 	%rs1, [applyLinearFunction_param_3];
	ld.param.u16 	%rs2, [applyLinearFunction_param_4];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd4, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd5, %r3, %r2;
	add.s64 	%rd1, %rd5, %rd4;
	ld.param.s32 	%rd6, [applyLinearFunction_param_0];
	setp.ge.s64	%p1, %rd1, %rd6;
	@%p1 bra 	BB6_2;

	cvta.to.global.u64 	%rd7, %rd2;
	shl.b64 	%rd8, %rd1, 1;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.s16 	%r4, [%rd9];
	cvt.s32.s16	%r5, %rs2;
	cvt.u32.u16	%r6, %rs1;
	mad.lo.s32 	%r7, %r4, %r5, %r6;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd8;
	st.global.u16 	[%rd11], %r7;

BB6_2:
	ret;
}

	// .globl	blockXOR
.visible .entry blockXOR(
	.param .u32 blockXOR_param_0,
	.param .u64 blockXOR_param_1,
	.param .u64 blockXOR_param_2,
	.param .u64 blockXOR_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<16>;


	ld.param.u64 	%rd2, [blockXOR_param_1];
	ld.param.u64 	%rd3, [blockXOR_param_2];
	ld.param.u64 	%rd4, [blockXOR_param_3];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd5, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd6, %r3, %r2;
	add.s64 	%rd1, %rd6, %rd5;
	shl.b64 	%rd7, %rd1, 3;
	ld.param.s32 	%rd8, [blockXOR_param_0];
	setp.ge.s64	%p1, %rd7, %rd8;
	@%p1 bra 	BB7_2;

	cvta.to.global.u64 	%rd9, %rd2;
	add.s64 	%rd11, %rd9, %rd7;
	ld.global.u64 	%rd12, [%rd11];
	xor.b64  	%rd13, %rd12, %rd4;
	cvta.to.global.u64 	%rd14, %rd3;
	add.s64 	%rd15, %rd14, %rd7;
	st.global.u64 	[%rd15], %rd13;

BB7_2:
	ret;
}

	// .globl	multiplyBy2
.visible .entry multiplyBy2(
	.param .u32 multiplyBy2_param_0,
	.param .u64 multiplyBy2_param_1,
	.param .u64 multiplyBy2_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<10>;


	ld.param.u32 	%r2, [multiplyBy2_param_0];
	ld.param.u64 	%rd1, [multiplyBy2_param_1];
	ld.param.u64 	%rd2, [multiplyBy2_param_2];
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r3;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB8_2;

	cvta.to.global.u64 	%rd3, %rd1;
	mul.wide.s32 	%rd4, %r1, 8;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.u64 	%rd6, [%rd5];
	shl.b64 	%rd7, %rd6, 1;
	cvta.to.global.u64 	%rd8, %rd2;
	add.s64 	%rd9, %rd8, %rd4;
	st.global.u64 	[%rd9], %rd7;

BB8_2:
	ret;
}

	// .globl	multiplyBy2_self
.visible .entry multiplyBy2_self(
	.param .u32 multiplyBy2_self_param_0,
	.param .u64 multiplyBy2_self_param_1
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<7>;


	ld.param.u32 	%r2, [multiplyBy2_self_param_0];
	ld.param.u64 	%rd1, [multiplyBy2_self_param_1];
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r1, %r4, %r5, %r3;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB9_2;

	cvta.to.global.u64 	%rd2, %rd1;
	mul.wide.s32 	%rd3, %r1, 8;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.u64 	%rd5, [%rd4];
	shl.b64 	%rd6, %rd5, 1;
	st.global.u64 	[%rd4], %rd6;

BB9_2:
	ret;
}

	// .globl	sum
.visible .entry sum(
	.param .u32 sum_param_0,
	.param .u64 sum_param_1,
	.param .u64 sum_param_2,
	.param .u32 sum_param_3,
	.param .u32 sum_param_4
)
{
	.reg .pred 	%p<9>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<38>;


	ld.param.u32 	%r9, [sum_param_0];
	ld.param.u64 	%rd15, [sum_param_1];
	ld.param.u64 	%rd14, [sum_param_2];
	ld.param.u32 	%r10, [sum_param_3];
	cvta.to.global.u64 	%rd34, %rd15;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd16, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd17, %r3, %r2;
	add.s64 	%rd2, %rd17, %rd16;
	setp.eq.s32	%p1, %r10, 0;
	@%p1 bra 	BB10_5;

	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB10_11;

	setp.lt.s32	%p3, %r9, 16384;
	cvt.s64.s32	%rd19, %r9;
	selp.b64	%rd3, %rd19, 16384, %p3;
	mov.u32 	%r20, 0;
	mov.u32 	%r21, %r20;
	mov.u64 	%rd35, 0;
	setp.lt.s64	%p4, %rd3, 1;
	@%p4 bra 	BB10_4;

BB10_3:
	ld.global.u32 	%r13, [%rd34];
	add.s32 	%r21, %r13, %r21;
	add.s64 	%rd34, %rd34, 4;
	add.s64 	%rd35, %rd35, 1;
	setp.lt.s64	%p5, %rd35, %rd3;
	mov.u32 	%r20, %r21;
	@%p5 bra 	BB10_3;

BB10_4:
	cvta.to.global.u64 	%rd20, %rd14;
	st.global.u32 	[%rd20], %r20;
	bra.uni 	BB10_11;

BB10_5:
	cvt.s64.s32	%rd8, %r9;
	setp.ge.s64	%p6, %rd2, %rd8;
	@%p6 bra 	BB10_11;

	mov.u32 	%r14, %nctaid.x;
	mul.lo.s32 	%r15, %r14, %r3;
	setp.eq.s32	%p7, %r15, 16384;
	@%p7 bra 	BB10_8;

	mov.u64 	%rd21, $str;
	cvta.global.u64 	%rd22, %rd21;
	mov.u64 	%rd23, $str1;
	cvta.global.u64 	%rd24, %rd23;
	mov.u64 	%rd25, __T20;
	cvta.global.u64 	%rd26, %rd25;
	mov.u32 	%r16, 136;
	mov.u64 	%rd27, 1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd22;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd24;
	.param .b32 param2;
	st.param.b32	[param2+0], %r16;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd26;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd27;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 0

BB10_8:
	add.s64 	%rd30, %rd17, %rd16;
	shl.b64 	%rd31, %rd30, 2;
	add.s64 	%rd36, %rd34, %rd31;
	mov.u32 	%r22, 0;
	mov.u64 	%rd37, %rd2;

BB10_9:
	mov.u64 	%rd11, %rd37;
	ld.global.u32 	%r18, [%rd36];
	add.s32 	%r22, %r18, %r22;
	add.s64 	%rd36, %rd36, 65536;
	add.s64 	%rd13, %rd11, 16384;
	setp.lt.s64	%p8, %rd13, %rd8;
	mov.u64 	%rd37, %rd13;
	@%p8 bra 	BB10_9;

	shl.b64 	%rd32, %rd2, 2;
	add.s64 	%rd33, %rd34, %rd32;
	st.global.u32 	[%rd33], %r22;

BB10_11:
	ret;
}

	// .globl	suml
.visible .entry suml(
	.param .u32 suml_param_0,
	.param .u64 suml_param_1,
	.param .u64 suml_param_2,
	.param .u32 suml_param_3,
	.param .u32 suml_param_4
)
{
	.reg .pred 	%p<9>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<52>;


	ld.param.u32 	%r4, [suml_param_0];
	ld.param.u64 	%rd20, [suml_param_1];
	ld.param.u64 	%rd19, [suml_param_2];
	ld.param.u32 	%r5, [suml_param_3];
	cvta.to.global.u64 	%rd44, %rd20;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd21, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd22, %r3, %r2;
	add.s64 	%rd2, %rd22, %rd21;
	setp.eq.s32	%p1, %r5, 0;
	@%p1 bra 	BB11_5;

	setp.ne.s64	%p2, %rd2, 0;
	@%p2 bra 	BB11_11;

	setp.lt.s32	%p3, %r4, 16384;
	cvt.s64.s32	%rd26, %r4;
	selp.b64	%rd3, %rd26, 16384, %p3;
	mov.u64 	%rd47, 0;
	mov.u64 	%rd48, %rd47;
	mov.u64 	%rd45, %rd47;
	setp.lt.s64	%p4, %rd3, 1;
	@%p4 bra 	BB11_4;

BB11_3:
	ld.global.u64 	%rd27, [%rd44];
	add.s64 	%rd48, %rd27, %rd48;
	add.s64 	%rd44, %rd44, 8;
	add.s64 	%rd45, %rd45, 1;
	setp.lt.s64	%p5, %rd45, %rd3;
	mov.u64 	%rd47, %rd48;
	@%p5 bra 	BB11_3;

BB11_4:
	cvta.to.global.u64 	%rd28, %rd19;
	st.global.u64 	[%rd28], %rd47;
	bra.uni 	BB11_11;

BB11_5:
	cvt.s64.s32	%rd11, %r4;
	setp.ge.s64	%p6, %rd2, %rd11;
	@%p6 bra 	BB11_11;

	mov.u32 	%r6, %nctaid.x;
	mul.lo.s32 	%r7, %r6, %r3;
	setp.eq.s32	%p7, %r7, 16384;
	@%p7 bra 	BB11_8;

	mov.u64 	%rd29, $str;
	cvta.global.u64 	%rd30, %rd29;
	mov.u64 	%rd31, $str1;
	cvta.global.u64 	%rd32, %rd31;
	mov.u64 	%rd33, __T21;
	cvta.global.u64 	%rd34, %rd33;
	mov.u32 	%r8, 160;
	mov.u64 	%rd35, 1;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd30;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd32;
	.param .b32 param2;
	st.param.b32	[param2+0], %r8;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd34;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd35;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 1

BB11_8:
	add.s64 	%rd39, %rd22, %rd21;
	shl.b64 	%rd40, %rd39, 3;
	add.s64 	%rd49, %rd44, %rd40;
	mov.u64 	%rd51, 0;
	mov.u64 	%rd50, %rd2;

BB11_9:
	mov.u64 	%rd14, %rd50;
	ld.global.u64 	%rd41, [%rd49];
	add.s64 	%rd51, %rd41, %rd51;
	add.s64 	%rd49, %rd49, 131072;
	add.s64 	%rd18, %rd14, 16384;
	setp.lt.s64	%p8, %rd18, %rd11;
	mov.u64 	%rd50, %rd18;
	@%p8 bra 	BB11_9;

	shl.b64 	%rd42, %rd2, 3;
	add.s64 	%rd43, %rd44, %rd42;
	st.global.u64 	[%rd43], %rd51;

BB11_11:
	ret;
}

	// .globl	intArraySum
.visible .entry intArraySum(
	.param .u32 intArraySum_param_0,
	.param .u64 intArraySum_param_1,
	.param .u64 intArraySum_param_2,
	.param .u32 intArraySum_param_3,
	.param .u32 intArraySum_param_4,
	.param .u32 intArraySum_param_5
)
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<79>;


	ld.param.u32 	%r4, [intArraySum_param_0];
	ld.param.u64 	%rd36, [intArraySum_param_1];
	ld.param.u64 	%rd37, [intArraySum_param_2];
	ld.param.u32 	%r5, [intArraySum_param_3];
	ld.param.u32 	%r6, [intArraySum_param_4];
	cvta.to.global.u64 	%rd1, %rd37;
	cvta.to.global.u64 	%rd2, %rd36;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd38, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd39, %r3, %r2;
	add.s64 	%rd3, %rd39, %rd38;
	setp.eq.s32	%p1, %r6, 0;
	@%p1 bra 	BB12_9;

	setp.ne.s64	%p2, %rd3, 0;
	@%p2 bra 	BB12_17;

	setp.lt.s32	%p3, %r4, 16384;
	cvt.s64.s32	%rd40, %r4;
	selp.b64	%rd4, %rd40, 16384, %p3;
	cvt.s64.s32	%rd5, %r5;
	setp.lt.s64	%p4, %rd4, 1;
	@%p4 bra 	BB12_17;

	mov.u64 	%rd41, 0;
	mov.u64 	%rd67, %rd41;

BB12_4:
	setp.eq.s64	%p5, %rd67, 0;
	setp.gt.s32	%p6, %r5, 0;
	and.pred  	%p7, %p5, %p6;
	mov.u64 	%rd66, %rd41;
	mov.u64 	%rd71, %rd1;
	@!%p7 bra 	BB12_6;
	bra.uni 	BB12_5;

BB12_5:
	mov.u64 	%rd8, %rd71;
	mov.u64 	%rd9, %rd66;
	mov.u32 	%r7, 0;
	st.global.u32 	[%rd8], %r7;
	add.s64 	%rd10, %rd8, 4;
	add.s64 	%rd11, %rd9, 1;
	setp.lt.s64	%p8, %rd11, %rd5;
	mov.u64 	%rd66, %rd11;
	mov.u64 	%rd71, %rd10;
	@%p8 bra 	BB12_5;

BB12_6:
	mul.lo.s64 	%rd44, %rd5, %rd67;
	shl.b64 	%rd45, %rd44, 2;
	add.s64 	%rd68, %rd2, %rd45;
	mov.u64 	%rd72, 0;
	setp.lt.s32	%p9, %r5, 1;
	mov.u64 	%rd70, %rd1;
	@%p9 bra 	BB12_8;

BB12_7:
	ld.global.u32 	%r8, [%rd70];
	ld.global.u32 	%r9, [%rd68];
	add.s32 	%r10, %r8, %r9;
	st.global.u32 	[%rd70], %r10;
	add.s64 	%rd70, %rd70, 4;
	add.s64 	%rd68, %rd68, 4;
	add.s64 	%rd72, %rd72, 1;
	setp.lt.s64	%p10, %rd72, %rd5;
	@%p10 bra 	BB12_7;

BB12_8:
	add.s64 	%rd67, %rd67, 1;
	setp.lt.s64	%p11, %rd67, %rd4;
	@%p11 bra 	BB12_4;
	bra.uni 	BB12_17;

BB12_9:
	cvt.s64.s32	%rd20, %r4;
	setp.ge.s64	%p12, %rd3, %rd20;
	@%p12 bra 	BB12_17;

	mov.u32 	%r11, %nctaid.x;
	mul.lo.s32 	%r12, %r11, %r3;
	setp.eq.s32	%p13, %r12, 16384;
	@%p13 bra 	BB12_12;

	mov.u64 	%rd46, $str;
	cvta.global.u64 	%rd47, %rd46;
	mov.u64 	%rd48, $str1;
	cvta.global.u64 	%rd49, %rd48;
	mov.u64 	%rd50, __T22;
	cvta.global.u64 	%rd51, %rd50;
	mov.u32 	%r13, 184;
	mov.u64 	%rd52, 1;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd47;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd49;
	.param .b32 param2;
	st.param.b32	[param2+0], %r13;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd51;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd52;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 2

BB12_12:
	add.s64 	%rd73, %rd3, 16384;
	setp.ge.s64	%p14, %rd73, %rd20;
	@%p14 bra 	BB12_17;

	cvt.s64.s32	%rd22, %r5;
	mul.lo.s64 	%rd57, %rd3, %rd22;
	add.s64 	%rd58, %rd57, %rd39;
	add.s64 	%rd59, %rd58, %rd38;
	add.s64 	%rd23, %rd59, 16384;
	shl.b64 	%rd60, %rd57, 2;
	add.s64 	%rd24, %rd2, %rd60;
	mov.u64 	%rd53, 0;
	mov.u64 	%rd78, %rd53;

BB12_14:
	shl.b64 	%rd62, %rd78, 14;
	add.s64 	%rd63, %rd23, %rd62;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd75, %rd2, %rd64;
	setp.lt.s32	%p15, %r5, 1;
	mov.u64 	%rd74, %rd24;
	mov.u64 	%rd77, %rd53;
	@%p15 bra 	BB12_16;

BB12_15:
	mov.u64 	%rd30, %rd77;
	mov.u64 	%rd28, %rd74;
	ld.global.u32 	%r14, [%rd28];
	ld.global.u32 	%r15, [%rd75];
	add.s32 	%r16, %r14, %r15;
	st.global.u32 	[%rd28], %r16;
	add.s64 	%rd75, %rd75, 4;
	add.s64 	%rd32, %rd28, 4;
	add.s64 	%rd33, %rd30, 1;
	setp.lt.s64	%p16, %rd33, %rd22;
	mov.u64 	%rd74, %rd32;
	mov.u64 	%rd77, %rd33;
	@%p16 bra 	BB12_15;

BB12_16:
	add.s64 	%rd73, %rd73, 16384;
	setp.lt.s64	%p17, %rd73, %rd20;
	add.s64 	%rd78, %rd78, 1;
	@%p17 bra 	BB12_14;

BB12_17:
	ret;
}

	// .globl	DataPointMap
.visible .entry DataPointMap(
	.param .u32 DataPointMap_param_0,
	.param .u64 DataPointMap_param_1,
	.param .u64 DataPointMap_param_2,
	.param .u64 DataPointMap_param_3,
	.param .u64 DataPointMap_param_4,
	.param .u32 DataPointMap_param_5
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<5>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<32>;


	ld.param.u64 	%rd13, [DataPointMap_param_1];
	ld.param.u64 	%rd14, [DataPointMap_param_3];
	ld.param.u64 	%rd15, [DataPointMap_param_4];
	ld.param.u32 	%r4, [DataPointMap_param_5];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd16, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd17, %r3, %r2;
	add.s64 	%rd18, %rd17, %rd16;
	ld.param.s32 	%rd19, [DataPointMap_param_0];
	setp.ge.s64	%p1, %rd18, %rd19;
	@%p1 bra 	BB13_4;

	setp.lt.s32	%p2, %r4, 1;
	@%p2 bra 	BB13_4;

	cvta.to.global.u64 	%rd21, %rd14;
	cvta.to.global.u64 	%rd30, %rd15;
	cvta.to.global.u64 	%rd22, %rd13;
	cvt.s64.s32	%rd2, %r4;
	mul.lo.s64 	%rd26, %rd18, %rd2;
	shl.b64 	%rd27, %rd26, 3;
	add.s64 	%rd29, %rd21, %rd27;
	add.s64 	%rd28, %rd22, %rd27;
	mov.u64 	%rd31, 0;

BB13_3:
	ld.global.f64 	%fd1, [%rd30];
	ld.global.f64 	%fd2, [%rd28];
	add.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%rd29], %fd3;
	add.s64 	%rd30, %rd30, 8;
	add.s64 	%rd29, %rd29, 8;
	add.s64 	%rd28, %rd28, 8;
	add.s64 	%rd31, %rd31, 1;
	setp.lt.s64	%p3, %rd31, %rd2;
	@%p3 bra 	BB13_3;

BB13_4:
	ret;
}

	// .globl	DataPointReduce
.visible .entry DataPointReduce(
	.param .u32 DataPointReduce_param_0,
	.param .u64 DataPointReduce_param_1,
	.param .u64 DataPointReduce_param_2,
	.param .u32 DataPointReduce_param_3,
	.param .u32 DataPointReduce_param_4,
	.param .u32 DataPointReduce_param_5
)
{
	.reg .pred 	%p<18>;
	.reg .b32 	%r<10>;
	.reg .f64 	%fd<7>;
	.reg .b64 	%rd<80>;


	ld.param.u32 	%r4, [DataPointReduce_param_0];
	ld.param.u64 	%rd36, [DataPointReduce_param_1];
	ld.param.u64 	%rd37, [DataPointReduce_param_2];
	ld.param.u32 	%r5, [DataPointReduce_param_3];
	ld.param.u32 	%r6, [DataPointReduce_param_4];
	cvta.to.global.u64 	%rd1, %rd37;
	cvta.to.global.u64 	%rd2, %rd36;
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32	%rd38, %r1;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %ntid.x;
	mul.wide.u32 	%rd39, %r3, %r2;
	add.s64 	%rd3, %rd39, %rd38;
	setp.eq.s32	%p1, %r6, 0;
	@%p1 bra 	BB14_9;

	setp.ne.s64	%p2, %rd3, 0;
	@%p2 bra 	BB14_17;

	setp.lt.s32	%p3, %r4, 16384;
	cvt.s64.s32	%rd40, %r4;
	selp.b64	%rd4, %rd40, 16384, %p3;
	cvt.s64.s32	%rd5, %r5;
	setp.lt.s64	%p4, %rd4, 1;
	@%p4 bra 	BB14_17;

	mov.u64 	%rd41, 0;
	mov.u64 	%rd68, %rd41;

BB14_4:
	setp.eq.s64	%p5, %rd68, 0;
	setp.gt.s32	%p6, %r5, 0;
	and.pred  	%p7, %p5, %p6;
	mov.u64 	%rd67, %rd41;
	mov.u64 	%rd72, %rd1;
	@!%p7 bra 	BB14_6;
	bra.uni 	BB14_5;

BB14_5:
	mov.u64 	%rd8, %rd72;
	mov.u64 	%rd9, %rd67;
	st.global.u64 	[%rd8], %rd41;
	add.s64 	%rd10, %rd8, 8;
	add.s64 	%rd11, %rd9, 1;
	setp.lt.s64	%p8, %rd11, %rd5;
	mov.u64 	%rd67, %rd11;
	mov.u64 	%rd72, %rd10;
	@%p8 bra 	BB14_5;

BB14_6:
	mul.lo.s64 	%rd45, %rd5, %rd68;
	shl.b64 	%rd46, %rd45, 3;
	add.s64 	%rd69, %rd2, %rd46;
	mov.u64 	%rd73, 0;
	setp.lt.s32	%p9, %r5, 1;
	mov.u64 	%rd71, %rd1;
	@%p9 bra 	BB14_8;

BB14_7:
	ld.global.f64 	%fd1, [%rd71];
	ld.global.f64 	%fd2, [%rd69];
	add.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%rd71], %fd3;
	add.s64 	%rd71, %rd71, 8;
	add.s64 	%rd69, %rd69, 8;
	add.s64 	%rd73, %rd73, 1;
	setp.lt.s64	%p10, %rd73, %rd5;
	@%p10 bra 	BB14_7;

BB14_8:
	add.s64 	%rd68, %rd68, 1;
	setp.lt.s64	%p11, %rd68, %rd4;
	@%p11 bra 	BB14_4;
	bra.uni 	BB14_17;

BB14_9:
	cvt.s64.s32	%rd20, %r4;
	setp.ge.s64	%p12, %rd3, %rd20;
	@%p12 bra 	BB14_17;

	mov.u32 	%r7, %nctaid.x;
	mul.lo.s32 	%r8, %r7, %r3;
	setp.eq.s32	%p13, %r8, 16384;
	@%p13 bra 	BB14_12;

	mov.u64 	%rd47, $str;
	cvta.global.u64 	%rd48, %rd47;
	mov.u64 	%rd49, $str1;
	cvta.global.u64 	%rd50, %rd49;
	mov.u64 	%rd51, __T23;
	cvta.global.u64 	%rd52, %rd51;
	mov.u32 	%r9, 237;
	mov.u64 	%rd53, 1;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd48;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd50;
	.param .b32 param2;
	st.param.b32	[param2+0], %r9;
	.param .b64 param3;
	st.param.b64	[param3+0], %rd52;
	.param .b64 param4;
	st.param.b64	[param4+0], %rd53;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	
	//{
	}// Callseq End 3

BB14_12:
	add.s64 	%rd74, %rd3, 16384;
	setp.ge.s64	%p14, %rd74, %rd20;
	@%p14 bra 	BB14_17;

	cvt.s64.s32	%rd22, %r5;
	mul.lo.s64 	%rd58, %rd3, %rd22;
	add.s64 	%rd59, %rd58, %rd39;
	add.s64 	%rd60, %rd59, %rd38;
	add.s64 	%rd23, %rd60, 16384;
	shl.b64 	%rd61, %rd58, 3;
	add.s64 	%rd24, %rd2, %rd61;
	mov.u64 	%rd54, 0;
	mov.u64 	%rd79, %rd54;

BB14_14:
	shl.b64 	%rd63, %rd79, 14;
	add.s64 	%rd64, %rd23, %rd63;
	shl.b64 	%rd65, %rd64, 3;
	add.s64 	%rd76, %rd2, %rd65;
	setp.lt.s32	%p15, %r5, 1;
	mov.u64 	%rd75, %rd24;
	mov.u64 	%rd78, %rd54;
	@%p15 bra 	BB14_16;

BB14_15:
	mov.u64 	%rd30, %rd78;
	mov.u64 	%rd28, %rd75;
	ld.global.f64 	%fd4, [%rd28];
	ld.global.f64 	%fd5, [%rd76];
	add.f64 	%fd6, %fd5, %fd4;
	st.global.f64 	[%rd28], %fd6;
	add.s64 	%rd76, %rd76, 8;
	add.s64 	%rd32, %rd28, 8;
	add.s64 	%rd33, %rd30, 1;
	setp.lt.s64	%p16, %rd33, %rd22;
	mov.u64 	%rd75, %rd32;
	mov.u64 	%rd78, %rd33;
	@%p16 bra 	BB14_15;

BB14_16:
	add.s64 	%rd74, %rd74, 16384;
	setp.lt.s64	%p17, %rd74, %rd20;
	add.s64 	%rd79, %rd79, 1;
	@%p17 bra 	BB14_14;

BB14_17:
	ret;
}

	// .globl	blockReduce
.visible .entry blockReduce(
	.param .u32 blockReduce_param_0,
	.param .u64 blockReduce_param_1,
	.param .u64 blockReduce_param_2,
	.param .u32 blockReduce_param_3
)
{
	.reg .pred 	%p<17>;
	.reg .b32 	%r<373>;
	.reg .f64 	%fd<105>;
	.reg .b64 	%rd<66>;


	ld.param.u32 	%r16, [blockReduce_param_0];
	ld.param.u64 	%rd35, [blockReduce_param_1];
	ld.param.u64 	%rd36, [blockReduce_param_2];
	ld.param.u32 	%r17, [blockReduce_param_3];
	cvta.to.global.u64 	%rd1, %rd36;
	cvta.to.global.u64 	%rd2, %rd35;
	mov.u32 	%r18, %ctaid.x;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r3, %r18, %r1, %r2;
	setp.ge.s32	%p1, %r3, %r16;
	@%p1 bra 	BB15_24;

	cvt.s64.s32	%rd3, %r17;
	cvt.s64.s32	%rd4, %r16;
	mov.u64 	%rd63, 0;
	setp.lt.s32	%p2, %r17, 4;
	@%p2 bra 	BB15_16;

	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r4, %r2, 31;
	mov.u32 	%r19, %nctaid.x;
	mul.lo.s32 	%r20, %r19, %r1;
	cvt.u64.u32	%rd6, %r20;
	add.s32 	%r21, %r3, 16;
	shr.s32 	%r22, %r21, 31;
	shr.u32 	%r23, %r22, 27;
	add.s32 	%r24, %r21, %r23;
	and.b32  	%r25, %r24, -32;
	sub.s32 	%r5, %r21, %r25;
	add.s32 	%r26, %r3, 8;
	shr.s32 	%r27, %r26, 31;
	shr.u32 	%r28, %r27, 27;
	add.s32 	%r29, %r26, %r28;
	and.b32  	%r30, %r29, -32;
	sub.s32 	%r6, %r26, %r30;
	add.s32 	%r31, %r3, 4;
	shr.s32 	%r32, %r31, 31;
	shr.u32 	%r33, %r32, 27;
	add.s32 	%r34, %r31, %r33;
	and.b32  	%r35, %r34, -32;
	sub.s32 	%r7, %r31, %r35;
	add.s32 	%r36, %r3, 2;
	shr.s32 	%r37, %r36, 31;
	shr.u32 	%r38, %r37, 27;
	add.s32 	%r39, %r36, %r38;
	and.b32  	%r40, %r39, -32;
	sub.s32 	%r8, %r36, %r40;
	add.s32 	%r41, %r3, 1;
	shr.s32 	%r42, %r41, 31;
	shr.u32 	%r43, %r42, 27;
	add.s32 	%r44, %r41, %r43;
	and.b32  	%r45, %r44, -32;
	sub.s32 	%r9, %r41, %r45;
	mov.u64 	%rd63, 0;

BB15_3:
	mov.f64 	%fd101, 0d0000000000000000;
	mov.f64 	%fd100, %fd101;
	mov.f64 	%fd99, %fd101;
	mov.f64 	%fd98, %fd101;
	setp.ge.s64	%p3, %rd5, %rd4;
	@%p3 bra 	BB15_6;

	mov.f64 	%fd101, 0d0000000000000000;
	mov.f64 	%fd100, %fd101;
	mov.f64 	%fd99, %fd101;
	mov.f64 	%fd98, %fd101;
	mov.u64 	%rd58, %rd5;

BB15_5:
	mov.u64 	%rd8, %rd58;
	mul.lo.s64 	%rd39, %rd8, %rd3;
	add.s64 	%rd40, %rd39, %rd63;
	shl.b64 	%rd41, %rd40, 3;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.f64 	%fd31, [%rd42];
	add.f64 	%fd98, %fd98, %fd31;
	ld.global.f64 	%fd32, [%rd42+8];
	add.f64 	%fd99, %fd99, %fd32;
	ld.global.f64 	%fd33, [%rd42+16];
	add.f64 	%fd100, %fd100, %fd33;
	ld.global.f64 	%fd34, [%rd42+24];
	add.f64 	%fd101, %fd101, %fd34;
	add.s64 	%rd9, %rd6, %rd8;
	setp.lt.s64	%p4, %rd9, %rd4;
	mov.u64 	%rd58, %rd9;
	@%p4 bra 	BB15_5;

BB15_6:
	// inline asm
	mov.b64 {%r46,%r47}, %fd98;
	// inline asm
	// inline asm
	mov.b64 {%r48,%r49}, %fd99;
	// inline asm
	// inline asm
	mov.b64 {%r50,%r51}, %fd100;
	// inline asm
	// inline asm
	mov.b64 {%r52,%r53}, %fd101;
	// inline asm
	mov.u32 	%r277, 31;
	// inline asm
	shfl.idx.b32 %r54, %r46, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r58, %r47, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r62, %r48, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r66, %r49, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r70, %r50, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r74, %r51, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r78, %r52, %r5, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r82, %r53, %r5, %r277;
	// inline asm
	// inline asm
	mov.b64 %fd39, {%r54,%r58};
	// inline asm
	// inline asm
	mov.b64 %fd40, {%r62,%r66};
	// inline asm
	// inline asm
	mov.b64 %fd41, {%r70,%r74};
	// inline asm
	// inline asm
	mov.b64 %fd42, {%r78,%r82};
	// inline asm
	add.f64 	%fd43, %fd98, %fd39;
	add.f64 	%fd44, %fd99, %fd40;
	add.f64 	%fd45, %fd100, %fd41;
	add.f64 	%fd46, %fd101, %fd42;
	// inline asm
	mov.b64 {%r94,%r95}, %fd43;
	// inline asm
	// inline asm
	mov.b64 {%r96,%r97}, %fd44;
	// inline asm
	// inline asm
	mov.b64 {%r98,%r99}, %fd45;
	// inline asm
	// inline asm
	mov.b64 {%r100,%r101}, %fd46;
	// inline asm
	// inline asm
	shfl.idx.b32 %r102, %r94, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r106, %r95, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r110, %r96, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r114, %r97, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r118, %r98, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r122, %r99, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r126, %r100, %r6, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r130, %r101, %r6, %r277;
	// inline asm
	// inline asm
	mov.b64 %fd47, {%r102,%r106};
	// inline asm
	// inline asm
	mov.b64 %fd48, {%r110,%r114};
	// inline asm
	// inline asm
	mov.b64 %fd49, {%r118,%r122};
	// inline asm
	// inline asm
	mov.b64 %fd50, {%r126,%r130};
	// inline asm
	add.f64 	%fd51, %fd43, %fd47;
	add.f64 	%fd52, %fd44, %fd48;
	add.f64 	%fd53, %fd45, %fd49;
	add.f64 	%fd54, %fd46, %fd50;
	// inline asm
	mov.b64 {%r142,%r143}, %fd51;
	// inline asm
	// inline asm
	mov.b64 {%r144,%r145}, %fd52;
	// inline asm
	// inline asm
	mov.b64 {%r146,%r147}, %fd53;
	// inline asm
	// inline asm
	mov.b64 {%r148,%r149}, %fd54;
	// inline asm
	// inline asm
	shfl.idx.b32 %r150, %r142, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r154, %r143, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r158, %r144, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r162, %r145, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r166, %r146, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r170, %r147, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r174, %r148, %r7, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r178, %r149, %r7, %r277;
	// inline asm
	// inline asm
	mov.b64 %fd55, {%r150,%r154};
	// inline asm
	// inline asm
	mov.b64 %fd56, {%r158,%r162};
	// inline asm
	// inline asm
	mov.b64 %fd57, {%r166,%r170};
	// inline asm
	// inline asm
	mov.b64 %fd58, {%r174,%r178};
	// inline asm
	add.f64 	%fd59, %fd51, %fd55;
	add.f64 	%fd60, %fd52, %fd56;
	add.f64 	%fd61, %fd53, %fd57;
	add.f64 	%fd62, %fd54, %fd58;
	// inline asm
	mov.b64 {%r190,%r191}, %fd59;
	// inline asm
	// inline asm
	mov.b64 {%r192,%r193}, %fd60;
	// inline asm
	// inline asm
	mov.b64 {%r194,%r195}, %fd61;
	// inline asm
	// inline asm
	mov.b64 {%r196,%r197}, %fd62;
	// inline asm
	// inline asm
	shfl.idx.b32 %r198, %r190, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r202, %r191, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r206, %r192, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r210, %r193, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r214, %r194, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r218, %r195, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r222, %r196, %r8, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r226, %r197, %r8, %r277;
	// inline asm
	// inline asm
	mov.b64 %fd63, {%r198,%r202};
	// inline asm
	// inline asm
	mov.b64 %fd64, {%r206,%r210};
	// inline asm
	// inline asm
	mov.b64 %fd65, {%r214,%r218};
	// inline asm
	// inline asm
	mov.b64 %fd66, {%r222,%r226};
	// inline asm
	add.f64 	%fd67, %fd59, %fd63;
	add.f64 	%fd68, %fd60, %fd64;
	add.f64 	%fd69, %fd61, %fd65;
	add.f64 	%fd70, %fd62, %fd66;
	// inline asm
	mov.b64 {%r238,%r239}, %fd67;
	// inline asm
	// inline asm
	mov.b64 {%r240,%r241}, %fd68;
	// inline asm
	// inline asm
	mov.b64 {%r242,%r243}, %fd69;
	// inline asm
	// inline asm
	mov.b64 {%r244,%r245}, %fd70;
	// inline asm
	// inline asm
	shfl.idx.b32 %r246, %r238, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r250, %r239, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r254, %r240, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r258, %r241, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r262, %r242, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r266, %r243, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r270, %r244, %r9, %r277;
	// inline asm
	// inline asm
	shfl.idx.b32 %r274, %r245, %r9, %r277;
	// inline asm
	// inline asm
	mov.b64 %fd71, {%r246,%r250};
	// inline asm
	// inline asm
	mov.b64 %fd72, {%r254,%r258};
	// inline asm
	// inline asm
	mov.b64 %fd73, {%r262,%r266};
	// inline asm
	// inline asm
	mov.b64 %fd74, {%r270,%r274};
	// inline asm
	add.f64 	%fd13, %fd67, %fd71;
	add.f64 	%fd14, %fd68, %fd72;
	add.f64 	%fd15, %fd69, %fd73;
	add.f64 	%fd16, %fd70, %fd74;
	setp.ne.s32	%p5, %r4, 0;
	@%p5 bra 	BB15_15;

	shl.b64 	%rd43, %rd63, 3;
	add.s64 	%rd10, %rd1, %rd43;
	ld.global.u64 	%rd59, [%rd10];

BB15_8:
	mov.u64 	%rd12, %rd59;
	mov.b64 	 %fd75, %rd12;
	add.f64 	%fd76, %fd13, %fd75;
	mov.b64 	 %rd44, %fd76;
	atom.global.cas.b64 	%rd59, [%rd10], %rd12, %rd44;
	setp.ne.s64	%p6, %rd12, %rd59;
	@%p6 bra 	BB15_8;

	ld.global.u64 	%rd60, [%rd10+8];

BB15_10:
	mov.u64 	%rd15, %rd60;
	add.s64 	%rd45, %rd10, 8;
	mov.b64 	 %fd77, %rd15;
	add.f64 	%fd78, %fd14, %fd77;
	mov.b64 	 %rd46, %fd78;
	atom.global.cas.b64 	%rd60, [%rd45], %rd15, %rd46;
	setp.ne.s64	%p7, %rd15, %rd60;
	@%p7 bra 	BB15_10;

	ld.global.u64 	%rd61, [%rd10+16];

BB15_12:
	mov.u64 	%rd18, %rd61;
	add.s64 	%rd47, %rd10, 16;
	mov.b64 	 %fd79, %rd18;
	add.f64 	%fd80, %fd15, %fd79;
	mov.b64 	 %rd48, %fd80;
	atom.global.cas.b64 	%rd61, [%rd47], %rd18, %rd48;
	setp.ne.s64	%p8, %rd18, %rd61;
	@%p8 bra 	BB15_12;

	ld.global.u64 	%rd62, [%rd10+24];

BB15_14:
	mov.u64 	%rd21, %rd62;
	add.s64 	%rd49, %rd10, 24;
	mov.b64 	 %fd81, %rd21;
	add.f64 	%fd82, %fd16, %fd81;
	mov.b64 	 %rd50, %fd82;
	atom.global.cas.b64 	%rd62, [%rd49], %rd21, %rd50;
	setp.ne.s64	%p9, %rd21, %rd62;
	@%p9 bra 	BB15_14;

BB15_15:
	add.s64 	%rd63, %rd63, 4;
	sub.s64 	%rd51, %rd3, %rd63;
	setp.gt.s64	%p10, %rd51, 3;
	@%p10 bra 	BB15_3;

BB15_16:
	setp.ge.s64	%p11, %rd63, %rd3;
	@%p11 bra 	BB15_24;

	cvt.u64.u32	%rd25, %r3;
	and.b32  	%r10, %r2, 31;
	mov.u32 	%r286, %nctaid.x;
	mul.lo.s32 	%r287, %r286, %r1;
	cvt.u64.u32	%rd26, %r287;
	add.s32 	%r288, %r3, 16;
	shr.s32 	%r289, %r288, 31;
	shr.u32 	%r290, %r289, 27;
	add.s32 	%r291, %r288, %r290;
	and.b32  	%r292, %r291, -32;
	sub.s32 	%r11, %r288, %r292;
	add.s32 	%r293, %r3, 8;
	shr.s32 	%r294, %r293, 31;
	shr.u32 	%r295, %r294, 27;
	add.s32 	%r296, %r293, %r295;
	and.b32  	%r297, %r296, -32;
	sub.s32 	%r12, %r293, %r297;
	add.s32 	%r298, %r3, 4;
	shr.s32 	%r299, %r298, 31;
	shr.u32 	%r300, %r299, 27;
	add.s32 	%r301, %r298, %r300;
	and.b32  	%r302, %r301, -32;
	sub.s32 	%r13, %r298, %r302;
	add.s32 	%r303, %r3, 2;
	shr.s32 	%r304, %r303, 31;
	shr.u32 	%r305, %r304, 27;
	add.s32 	%r306, %r303, %r305;
	and.b32  	%r307, %r306, -32;
	sub.s32 	%r14, %r303, %r307;
	add.s32 	%r308, %r3, 1;
	shr.s32 	%r309, %r308, 31;
	shr.u32 	%r310, %r309, 27;
	add.s32 	%r311, %r308, %r310;
	and.b32  	%r312, %r311, -32;
	sub.s32 	%r15, %r308, %r312;

BB15_18:
	mov.f64 	%fd103, 0d0000000000000000;
	mov.f64 	%fd104, %fd103;
	setp.ge.s64	%p12, %rd25, %rd4;
	mov.u64 	%rd64, %rd25;
	@%p12 bra 	BB15_20;

BB15_19:
	mov.u64 	%rd28, %rd64;
	mul.lo.s64 	%rd52, %rd28, %rd3;
	add.s64 	%rd53, %rd52, %rd63;
	shl.b64 	%rd54, %rd53, 3;
	add.s64 	%rd55, %rd2, %rd54;
	ld.global.f64 	%fd85, [%rd55];
	add.f64 	%fd104, %fd104, %fd85;
	add.s64 	%rd29, %rd26, %rd28;
	setp.lt.s64	%p13, %rd29, %rd4;
	mov.u64 	%rd64, %rd29;
	mov.f64 	%fd103, %fd104;
	@%p13 bra 	BB15_19;

BB15_20:
	// inline asm
	mov.b64 {%r313,%r314}, %fd103;
	// inline asm
	mov.u32 	%r370, 31;
	// inline asm
	shfl.idx.b32 %r315, %r313, %r11, %r370;
	// inline asm
	// inline asm
	shfl.idx.b32 %r319, %r314, %r11, %r370;
	// inline asm
	// inline asm
	mov.b64 %fd87, {%r315,%r319};
	// inline asm
	add.f64 	%fd88, %fd103, %fd87;
	// inline asm
	mov.b64 {%r325,%r326}, %fd88;
	// inline asm
	// inline asm
	shfl.idx.b32 %r327, %r325, %r12, %r370;
	// inline asm
	// inline asm
	shfl.idx.b32 %r331, %r326, %r12, %r370;
	// inline asm
	// inline asm
	mov.b64 %fd89, {%r327,%r331};
	// inline asm
	add.f64 	%fd90, %fd88, %fd89;
	// inline asm
	mov.b64 {%r337,%r338}, %fd90;
	// inline asm
	// inline asm
	shfl.idx.b32 %r339, %r337, %r13, %r370;
	// inline asm
	// inline asm
	shfl.idx.b32 %r343, %r338, %r13, %r370;
	// inline asm
	// inline asm
	mov.b64 %fd91, {%r339,%r343};
	// inline asm
	add.f64 	%fd92, %fd90, %fd91;
	// inline asm
	mov.b64 {%r349,%r350}, %fd92;
	// inline asm
	// inline asm
	shfl.idx.b32 %r351, %r349, %r14, %r370;
	// inline asm
	// inline asm
	shfl.idx.b32 %r355, %r350, %r14, %r370;
	// inline asm
	// inline asm
	mov.b64 %fd93, {%r351,%r355};
	// inline asm
	add.f64 	%fd94, %fd92, %fd93;
	// inline asm
	mov.b64 {%r361,%r362}, %fd94;
	// inline asm
	// inline asm
	shfl.idx.b32 %r363, %r361, %r15, %r370;
	// inline asm
	// inline asm
	shfl.idx.b32 %r367, %r362, %r15, %r370;
	// inline asm
	// inline asm
	mov.b64 %fd95, {%r363,%r367};
	// inline asm
	setp.ne.s32	%p14, %r10, 0;
	@%p14 bra 	BB15_23;

	shl.b64 	%rd56, %rd63, 3;
	add.s64 	%rd30, %rd1, %rd56;
	add.f64 	%fd22, %fd94, %fd95;
	ld.global.u64 	%rd65, [%rd30];

BB15_22:
	mov.u64 	%rd32, %rd65;
	mov.b64 	 %fd96, %rd32;
	add.f64 	%fd97, %fd22, %fd96;
	mov.b64 	 %rd57, %fd97;
	atom.global.cas.b64 	%rd65, [%rd30], %rd32, %rd57;
	setp.ne.s64	%p15, %rd32, %rd65;
	@%p15 bra 	BB15_22;

BB15_23:
	add.s64 	%rd63, %rd63, 1;
	setp.lt.s64	%p16, %rd63, %rd3;
	@%p16 bra 	BB15_18;

BB15_24:
	ret;
}

	// .globl	mapAll
.visible .entry mapAll(
	.param .u32 mapAll_param_0,
	.param .u64 mapAll_param_1,
	.param .u64 mapAll_param_2,
	.param .u64 mapAll_param_3,
	.param .u64 mapAll_param_4,
	.param .u32 mapAll_param_5
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<34>;
	.reg .f64 	%fd<58>;
	.reg .b64 	%rd<28>;


	ld.param.u32 	%r13, [mapAll_param_0];
	ld.param.u64 	%rd14, [mapAll_param_1];
	ld.param.u64 	%rd15, [mapAll_param_2];
	ld.param.u64 	%rd16, [mapAll_param_3];
	ld.param.u64 	%rd17, [mapAll_param_4];
	ld.param.u32 	%r12, [mapAll_param_5];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	setp.ge.s32	%p1, %r4, %r13;
	@%p1 bra 	BB16_10;

	cvta.to.global.u64 	%rd18, %rd15;
	cvta.to.global.u64 	%rd1, %rd14;
	mul.wide.s32 	%rd19, %r4, 8;
	add.s64 	%rd20, %rd18, %rd19;
	ld.global.f64 	%fd1, [%rd20];
	mov.f64 	%fd56, 0d0000000000000000;
	setp.lt.s32	%p2, %r12, 1;
	@%p2 bra 	BB16_4;

	cvta.to.global.u64 	%rd24, %rd17;
	mul.lo.s32 	%r16, %r12, %r4;
	mul.wide.s32 	%rd21, %r16, 8;
	add.s64 	%rd25, %rd1, %rd21;
	mov.f64 	%fd56, 0d0000000000000000;
	mov.u32 	%r32, 0;

BB16_3:
	ld.global.f64 	%fd13, [%rd25];
	ld.global.f64 	%fd14, [%rd24];
	fma.rn.f64 	%fd56, %fd14, %fd13, %fd56;
	add.s64 	%rd25, %rd25, 8;
	add.s64 	%rd24, %rd24, 8;
	add.s32 	%r32, %r32, 1;
	setp.lt.s32	%p3, %r32, %r12;
	@%p3 bra 	BB16_3;

BB16_4:
	mul.f64 	%fd5, %fd1, %fd56;
	neg.f64 	%fd15, %fd5;
	mov.f64 	%fd16, 0d4338000000000000;
	mov.f64 	%fd17, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd18, %fd15, %fd17, %fd16;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r7, %temp}, %fd18;
	}
	mov.f64 	%fd19, 0dC338000000000000;
	add.rn.f64 	%fd20, %fd18, %fd19;
	mov.f64 	%fd21, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd22, %fd20, %fd21, %fd15;
	mov.f64 	%fd23, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd24, %fd20, %fd23, %fd22;
	mov.f64 	%fd25, 0d3E928AF3FCA213EA;
	mov.f64 	%fd26, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd27, %fd26, %fd24, %fd25;
	mov.f64 	%fd28, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd29, %fd27, %fd24, %fd28;
	mov.f64 	%fd30, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd31, %fd29, %fd24, %fd30;
	mov.f64 	%fd32, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd33, %fd31, %fd24, %fd32;
	mov.f64 	%fd34, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd35, %fd33, %fd24, %fd34;
	mov.f64 	%fd36, 0d3F81111111122322;
	fma.rn.f64 	%fd37, %fd35, %fd24, %fd36;
	mov.f64 	%fd38, 0d3FA55555555502A1;
	fma.rn.f64 	%fd39, %fd37, %fd24, %fd38;
	mov.f64 	%fd40, 0d3FC5555555555511;
	fma.rn.f64 	%fd41, %fd39, %fd24, %fd40;
	mov.f64 	%fd42, 0d3FE000000000000B;
	fma.rn.f64 	%fd43, %fd41, %fd24, %fd42;
	mov.f64 	%fd44, 0d3FF0000000000000;
	fma.rn.f64 	%fd45, %fd43, %fd24, %fd44;
	fma.rn.f64 	%fd46, %fd45, %fd24, %fd44;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r8, %temp}, %fd46;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r9}, %fd46;
	}
	shl.b32 	%r17, %r7, 20;
	add.s32 	%r18, %r9, %r17;
	mov.b64 	%fd57, {%r8, %r18};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r19}, %fd15;
	}
	mov.b32 	 %f2, %r19;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB16_7;

	setp.gt.f64	%p5, %fd5, 0d8000000000000000;
	mov.f64 	%fd47, 0d7FF0000000000000;
	sub.f64 	%fd48, %fd47, %fd5;
	selp.f64	%fd57, 0d0000000000000000, %fd48, %p5;
	setp.geu.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB16_7;

	shr.u32 	%r20, %r7, 31;
	add.s32 	%r21, %r7, %r20;
	shr.s32 	%r22, %r21, 1;
	shl.b32 	%r23, %r22, 20;
	add.s32 	%r24, %r23, %r9;
	mov.b64 	%fd49, {%r8, %r24};
	sub.s32 	%r25, %r7, %r22;
	shl.b32 	%r26, %r25, 20;
	add.s32 	%r27, %r26, 1072693248;
	mov.u32 	%r28, 0;
	mov.b64 	%fd50, {%r28, %r27};
	mul.f64 	%fd57, %fd49, %fd50;

BB16_7:
	@%p2 bra 	BB16_10;

	cvta.to.global.u64 	%rd22, %rd16;
	add.f64 	%fd51, %fd57, 0d3FF0000000000000;
	rcp.rn.f64 	%fd52, %fd51;
	add.f64 	%fd53, %fd52, 0dBFF0000000000000;
	mul.f64 	%fd10, %fd1, %fd53;
	mul.lo.s32 	%r31, %r12, %r4;
	mul.wide.s32 	%rd23, %r31, 8;
	add.s64 	%rd27, %rd22, %rd23;
	add.s64 	%rd26, %rd1, %rd23;
	mov.u32 	%r33, 0;

BB16_9:
	ld.global.f64 	%fd54, [%rd26];
	mul.f64 	%fd55, %fd10, %fd54;
	st.global.f64 	[%rd27], %fd55;
	add.s64 	%rd27, %rd27, 8;
	add.s64 	%rd26, %rd26, 8;
	add.s32 	%r33, %r33, 1;
	setp.lt.s32	%p8, %r33, %r12;
	@%p8 bra 	BB16_9;

BB16_10:
	ret;
}

	// .globl	MNKernel
.visible .entry MNKernel(
	.param .u32 MNKernel_param_0,
	.param .u64 MNKernel_param_1,
	.param .u64 MNKernel_param_2,
	.param .u64 MNKernel_param_3,
	.param .u32 MNKernel_param_4
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<24>;


	ld.param.u64 	%rd9, [MNKernel_param_1];
	ld.param.u64 	%rd10, [MNKernel_param_2];
	ld.param.u64 	%rd6, [MNKernel_param_3];
	ld.param.u32 	%r5, [MNKernel_param_4];
	cvta.to.global.u64 	%rd1, %rd10;
	cvta.to.global.u64 	%rd2, %rd9;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mul.lo.s32 	%r2, %r13, %r5;
	mov.u64 	%rd22, 0;
	mov.u64 	%rd23, %rd22;
	mov.u32 	%r17, 0;
	setp.lt.s32	%p1, %r5, 1;
	@%p1 bra 	BB17_2;

BB17_1:
	add.s32 	%r14, %r17, %r2;
	mul.wide.s32 	%rd11, %r14, 8;
	add.s64 	%rd12, %rd2, %rd11;
	mad.lo.s32 	%r15, %r17, %r5, %r1;
	mul.wide.s32 	%rd13, %r15, 8;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.u64 	%rd15, [%rd14];
	ld.global.u64 	%rd16, [%rd12];
	mul.lo.s64 	%rd17, %rd15, %rd16;
	add.s64 	%rd23, %rd17, %rd23;
	add.s32 	%r17, %r17, 1;
	setp.lt.s32	%p2, %r17, %r5;
	mov.u64 	%rd22, %rd23;
	@%p2 bra 	BB17_1;

BB17_2:
	cvta.to.global.u64 	%rd18, %rd6;
	add.s32 	%r16, %r2, %r1;
	mul.wide.s32 	%rd19, %r16, 8;
	add.s64 	%rd20, %rd18, %rd19;
	st.global.u64 	[%rd20], %rd22;
	ret;
}


